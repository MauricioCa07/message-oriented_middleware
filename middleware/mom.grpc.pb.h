// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom.proto
#ifndef GRPC_mom_2eproto__INCLUDED
#define GRPC_mom_2eproto__INCLUDED

#include "mom.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mom {

class MOM_service final {
 public:
  static constexpr char const* service_full_name() {
    return "mom.MOM_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ---------------------------------------------------
    // -                                                -
    // -              METHODS FOR SYNC MOMS             -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status sync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::sync_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>> Asyncsync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>>(Asyncsync_topicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>> PrepareAsyncsync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>>(PrepareAsyncsync_topicsRaw(context, request, cq));
    }
    virtual ::grpc::Status sync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::sync_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>> Asyncsync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>>(Asyncsync_queuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>> PrepareAsyncsync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>>(PrepareAsyncsync_queuesRaw(context, request, cq));
    }
    // ---------------------------------------------------
    // -                                                -
    // -              QUEUE'S METHODS                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status create_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asynccreate_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asynccreate_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsynccreate_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsynccreate_queueRaw(context, request, cq));
    }
    virtual ::grpc::Status delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncdelete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncdelete_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncdelete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncdelete_queueRaw(context, request, cq));
    }
    virtual ::grpc::Status list_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::queues_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>> Asynclist_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>>(Asynclist_queuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>> PrepareAsynclist_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>>(PrepareAsynclist_queuesRaw(context, request, cq));
    }
    virtual ::grpc::Status get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::queue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>> Asyncget_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>>(Asyncget_queue_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>> PrepareAsyncget_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>>(PrepareAsyncget_queue_infoRaw(context, request, cq));
    }
    // ---------------------------------------------------
    // -                                                -
    // -              TOPIC'S METHODS                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status create_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asynccreate_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asynccreate_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsynccreate_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsynccreate_topicRaw(context, request, cq));
    }
    virtual ::grpc::Status delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncdelete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncdelete_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncdelete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncdelete_topicRaw(context, request, cq));
    }
    virtual ::grpc::Status list_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::topics_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>> Asynclist_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>>(Asynclist_topicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>> PrepareAsynclist_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>>(PrepareAsynclist_topicsRaw(context, request, cq));
    }
    virtual ::grpc::Status get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::mom::topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>> Asyncget_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>>(Asyncget_topic_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>> PrepareAsyncget_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>>(PrepareAsyncget_topic_infoRaw(context, request, cq));
    }
    virtual ::grpc::Status subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncsubscribe_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncsubscribe_topicRaw(context, request, cq));
    }
    virtual ::grpc::Status unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncunsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncunsubscribe_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncunsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncunsubscribe_topicRaw(context, request, cq));
    }
    // ---------------------------------------------------
    // -                                                -
    // -                     MESSAGES                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::mom::message_status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>> Asyncsend_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>>(Asyncsend_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>> PrepareAsyncsend_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>>(PrepareAsyncsend_queue_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>> Asyncreceive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>>(Asyncreceive_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>> PrepareAsyncreceive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>>(PrepareAsyncreceive_queue_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::mom::message_status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>> Asyncpublish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>>(Asyncpublish_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>> PrepareAsyncpublish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>>(PrepareAsyncpublish_topic_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>> Asyncreceive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>>(Asyncreceive_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>> PrepareAsyncreceive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>>(PrepareAsyncreceive_topic_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncacknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncacknowledge_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncacknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncacknowledge_messageRaw(context, request, cq));
    }
    // ---------------------------------------------------
    // -                                                -
    // -                     CLUSTER                    -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status join_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::cluster_info* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>> Asyncjoin_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>>(Asyncjoin_clusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>> PrepareAsyncjoin_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>>(PrepareAsyncjoin_clusterRaw(context, request, cq));
    }
    virtual ::grpc::Status leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncleave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(Asyncleave_clusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncleave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncleave_clusterRaw(context, request, cq));
    }
    virtual ::grpc::Status heartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> Asyncheartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(AsyncheartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncheartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncheartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::cluster_state* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>> Asyncget_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>>(Asyncget_cluster_stateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>> PrepareAsyncget_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>>(PrepareAsyncget_cluster_stateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ---------------------------------------------------
      // -                                                -
      // -              METHODS FOR SYNC MOMS             -
      // -                                                -
      // --------------------------------------------------
      virtual void sync_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sync_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sync_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sync_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ---------------------------------------------------
      // -                                                -
      // -              QUEUE'S METHODS                   -
      // -                                                -
      // --------------------------------------------------
      virtual void create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void list_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::queues_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::queues_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::queue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::queue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ---------------------------------------------------
      // -                                                -
      // -              TOPIC'S METHODS                   -
      // -                                                -
      // --------------------------------------------------
      virtual void create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void list_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::topics_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::topics_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::topic* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::topic* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ---------------------------------------------------
      // -                                                -
      // -                     MESSAGES                   -
      // -                                                -
      // --------------------------------------------------
      virtual void send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ---------------------------------------------------
      // -                                                -
      // -                     CLUSTER                    -
      // -                                                -
      // --------------------------------------------------
      virtual void join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, std::function<void(::grpc::Status)>) = 0;
      virtual void join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void heartbeat(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void heartbeat(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>* Asyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>* PrepareAsyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>* Asyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::sync_response>* PrepareAsyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>* Asynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>* PrepareAsynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>* Asyncget_queue_infoRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queue>* PrepareAsyncget_queue_infoRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>* Asynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>* PrepareAsynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>* Asyncget_topic_infoRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topic>* PrepareAsyncget_topic_infoRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>* Asyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>* PrepareAsyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>* Asyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>* PrepareAsyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>* Asyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message_status>* PrepareAsyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>* Asyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::message>* PrepareAsyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncacknowledge_messageRaw(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncacknowledge_messageRaw(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>* Asyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_info>* PrepareAsyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* Asyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* AsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>* Asyncget_cluster_stateRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::cluster_state>* PrepareAsyncget_cluster_stateRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::sync_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>> Asyncsync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>>(Asyncsync_topicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>> PrepareAsyncsync_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>>(PrepareAsyncsync_topicsRaw(context, request, cq));
    }
    ::grpc::Status sync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::sync_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>> Asyncsync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>>(Asyncsync_queuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>> PrepareAsyncsync_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::sync_response>>(PrepareAsyncsync_queuesRaw(context, request, cq));
    }
    ::grpc::Status create_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asynccreate_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asynccreate_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsynccreate_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsynccreate_queueRaw(context, request, cq));
    }
    ::grpc::Status delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncdelete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncdelete_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncdelete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncdelete_queueRaw(context, request, cq));
    }
    ::grpc::Status list_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::queues_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>> Asynclist_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>>(Asynclist_queuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>> PrepareAsynclist_queues(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>>(PrepareAsynclist_queuesRaw(context, request, cq));
    }
    ::grpc::Status get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::queue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queue>> Asyncget_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queue>>(Asyncget_queue_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queue>> PrepareAsyncget_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queue>>(PrepareAsyncget_queue_infoRaw(context, request, cq));
    }
    ::grpc::Status create_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asynccreate_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asynccreate_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsynccreate_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsynccreate_topicRaw(context, request, cq));
    }
    ::grpc::Status delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncdelete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncdelete_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncdelete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncdelete_topicRaw(context, request, cq));
    }
    ::grpc::Status list_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::topics_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>> Asynclist_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>>(Asynclist_topicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>> PrepareAsynclist_topics(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>>(PrepareAsynclist_topicsRaw(context, request, cq));
    }
    ::grpc::Status get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::mom::topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topic>> Asyncget_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topic>>(Asyncget_topic_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topic>> PrepareAsyncget_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topic>>(PrepareAsyncget_topic_infoRaw(context, request, cq));
    }
    ::grpc::Status subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncsubscribe_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncsubscribe_topicRaw(context, request, cq));
    }
    ::grpc::Status unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncunsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncunsubscribe_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncunsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncunsubscribe_topicRaw(context, request, cq));
    }
    ::grpc::Status send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::mom::message_status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>> Asyncsend_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>>(Asyncsend_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>> PrepareAsyncsend_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>>(PrepareAsyncsend_queue_messageRaw(context, request, cq));
    }
    ::grpc::Status receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::mom::message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>> Asyncreceive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>>(Asyncreceive_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>> PrepareAsyncreceive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>>(PrepareAsyncreceive_queue_messageRaw(context, request, cq));
    }
    ::grpc::Status publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::mom::message_status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>> Asyncpublish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>>(Asyncpublish_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>> PrepareAsyncpublish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message_status>>(PrepareAsyncpublish_topic_messageRaw(context, request, cq));
    }
    ::grpc::Status receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::mom::message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>> Asyncreceive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>>(Asyncreceive_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>> PrepareAsyncreceive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::message>>(PrepareAsyncreceive_topic_messageRaw(context, request, cq));
    }
    ::grpc::Status acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncacknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncacknowledge_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncacknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncacknowledge_messageRaw(context, request, cq));
    }
    ::grpc::Status join_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::cluster_info* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>> Asyncjoin_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>>(Asyncjoin_clusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>> PrepareAsyncjoin_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>>(PrepareAsyncjoin_clusterRaw(context, request, cq));
    }
    ::grpc::Status leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncleave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(Asyncleave_clusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncleave_cluster(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncleave_clusterRaw(context, request, cq));
    }
    ::grpc::Status heartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> Asyncheartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(AsyncheartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncheartbeat(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncheartbeatRaw(context, request, cq));
    }
    ::grpc::Status get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::mom::cluster_state* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>> Asyncget_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>>(Asyncget_cluster_stateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>> PrepareAsyncget_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>>(PrepareAsyncget_cluster_stateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sync_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, std::function<void(::grpc::Status)>) override;
      void sync_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sync_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, std::function<void(::grpc::Status)>) override;
      void sync_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::sync_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void delete_queue(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void list_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::queues_response* response, std::function<void(::grpc::Status)>) override;
      void list_queues(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::queues_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::queue* response, std::function<void(::grpc::Status)>) override;
      void get_queue_info(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::queue* response, ::grpc::ClientUnaryReactor* reactor) override;
      void create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void delete_topic(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void list_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::topics_response* response, std::function<void(::grpc::Status)>) override;
      void list_topics(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::topics_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::topic* response, std::function<void(::grpc::Status)>) override;
      void get_topic_info(::grpc::ClientContext* context, const ::mom::topic_identifier* request, ::mom::topic* response, ::grpc::ClientUnaryReactor* reactor) override;
      void subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)>) override;
      void send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::message* response, std::function<void(::grpc::Status)>) override;
      void receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_identifier* request, ::mom::message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)>) override;
      void publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::message* response, std::function<void(::grpc::Status)>) override;
      void receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_subscription* request, ::mom::message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void acknowledge_message(::grpc::ClientContext* context, const ::mom::message_identifier* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, std::function<void(::grpc::Status)>) override;
      void join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, ::grpc::ClientUnaryReactor* reactor) override;
      void leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void leave_cluster(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void heartbeat(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void heartbeat(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response, std::function<void(::grpc::Status)>) override;
      void get_cluster_state(::grpc::ClientContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mom::sync_response>* Asyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::sync_response>* PrepareAsyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::sync_response>* Asyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::sync_response>* PrepareAsyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queues_response>* Asynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queues_response>* PrepareAsynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queue>* Asyncget_queue_infoRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queue>* PrepareAsyncget_queue_infoRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topics_response>* Asynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topics_response>* PrepareAsynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topic>* Asyncget_topic_infoRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topic>* PrepareAsyncget_topic_infoRaw(::grpc::ClientContext* context, const ::mom::topic_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message_status>* Asyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message_status>* PrepareAsyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message>* Asyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message>* PrepareAsyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message_status>* Asyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message_status>* PrepareAsyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message>* Asyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::message>* PrepareAsyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncacknowledge_messageRaw(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncacknowledge_messageRaw(::grpc::ClientContext* context, const ::mom::message_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>* Asyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::cluster_info>* PrepareAsyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* Asyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* AsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>* Asyncget_cluster_stateRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::cluster_state>* PrepareAsyncget_cluster_stateRaw(::grpc::ClientContext* context, const ::mom::NodeID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sync_topics_;
    const ::grpc::internal::RpcMethod rpcmethod_sync_queues_;
    const ::grpc::internal::RpcMethod rpcmethod_create_queue_;
    const ::grpc::internal::RpcMethod rpcmethod_delete_queue_;
    const ::grpc::internal::RpcMethod rpcmethod_list_queues_;
    const ::grpc::internal::RpcMethod rpcmethod_get_queue_info_;
    const ::grpc::internal::RpcMethod rpcmethod_create_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_delete_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_list_topics_;
    const ::grpc::internal::RpcMethod rpcmethod_get_topic_info_;
    const ::grpc::internal::RpcMethod rpcmethod_subscribe_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_unsubscribe_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_send_queue_message_;
    const ::grpc::internal::RpcMethod rpcmethod_receive_queue_message_;
    const ::grpc::internal::RpcMethod rpcmethod_publish_topic_message_;
    const ::grpc::internal::RpcMethod rpcmethod_receive_topic_message_;
    const ::grpc::internal::RpcMethod rpcmethod_acknowledge_message_;
    const ::grpc::internal::RpcMethod rpcmethod_join_cluster_;
    const ::grpc::internal::RpcMethod rpcmethod_leave_cluster_;
    const ::grpc::internal::RpcMethod rpcmethod_heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_get_cluster_state_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ---------------------------------------------------
    // -                                                -
    // -              METHODS FOR SYNC MOMS             -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status sync_topics(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::sync_response* response);
    virtual ::grpc::Status sync_queues(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::sync_response* response);
    // ---------------------------------------------------
    // -                                                -
    // -              QUEUE'S METHODS                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status create_queue(::grpc::ServerContext* context, const ::mom::queue_config* request, ::mom::status* response);
    virtual ::grpc::Status delete_queue(::grpc::ServerContext* context, const ::mom::queue_identifier* request, ::mom::status* response);
    virtual ::grpc::Status list_queues(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::queues_response* response);
    virtual ::grpc::Status get_queue_info(::grpc::ServerContext* context, const ::mom::queue_identifier* request, ::mom::queue* response);
    // ---------------------------------------------------
    // -                                                -
    // -              TOPIC'S METHODS                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status create_topic(::grpc::ServerContext* context, const ::mom::topic_config* request, ::mom::status* response);
    virtual ::grpc::Status delete_topic(::grpc::ServerContext* context, const ::mom::topic_identifier* request, ::mom::status* response);
    virtual ::grpc::Status list_topics(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::topics_response* response);
    virtual ::grpc::Status get_topic_info(::grpc::ServerContext* context, const ::mom::topic_identifier* request, ::mom::topic* response);
    virtual ::grpc::Status subscribe_topic(::grpc::ServerContext* context, const ::mom::topic_subscription* request, ::mom::status* response);
    virtual ::grpc::Status unsubscribe_topic(::grpc::ServerContext* context, const ::mom::topic_subscription* request, ::mom::status* response);
    // ---------------------------------------------------
    // -                                                -
    // -                     MESSAGES                   -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status send_queue_message(::grpc::ServerContext* context, const ::mom::queue_message* request, ::mom::message_status* response);
    virtual ::grpc::Status receive_queue_message(::grpc::ServerContext* context, const ::mom::queue_identifier* request, ::mom::message* response);
    virtual ::grpc::Status publish_topic_message(::grpc::ServerContext* context, const ::mom::topic_message* request, ::mom::message_status* response);
    virtual ::grpc::Status receive_topic_message(::grpc::ServerContext* context, const ::mom::topic_subscription* request, ::mom::message* response);
    virtual ::grpc::Status acknowledge_message(::grpc::ServerContext* context, const ::mom::message_identifier* request, ::mom::status* response);
    // ---------------------------------------------------
    // -                                                -
    // -                     CLUSTER                    -
    // -                                                -
    // --------------------------------------------------
    virtual ::grpc::Status join_cluster(::grpc::ServerContext* context, const ::mom::node_info* request, ::mom::cluster_info* response);
    virtual ::grpc::Status leave_cluster(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::status* response);
    virtual ::grpc::Status heartbeat(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::status* response);
    virtual ::grpc::Status get_cluster_state(::grpc::ServerContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sync_topics() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_topics(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::sync_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sync_queues() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_queues(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::sync_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create_queue() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate_queue(::grpc::ServerContext* context, ::mom::queue_config* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_delete_queue() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdelete_queue(::grpc::ServerContext* context, ::mom::queue_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_queues() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_queues(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::queues_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_queue_info() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_queue_info(::grpc::ServerContext* context, ::mom::queue_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::queue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_create_topic() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate_topic(::grpc::ServerContext* context, ::mom::topic_config* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_delete_topic() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdelete_topic(::grpc::ServerContext* context, ::mom::topic_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_topics() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_topics(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::topics_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_topic_info() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_topic_info(::grpc::ServerContext* context, ::mom::topic_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsubscribe_topic(::grpc::ServerContext* context, ::mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunsubscribe_topic(::grpc::ServerContext* context, ::mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_send_queue_message() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend_queue_message(::grpc::ServerContext* context, ::mom::queue_message* request, ::grpc::ServerAsyncResponseWriter< ::mom::message_status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreceive_queue_message(::grpc::ServerContext* context, ::mom::queue_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpublish_topic_message(::grpc::ServerContext* context, ::mom::topic_message* request, ::grpc::ServerAsyncResponseWriter< ::mom::message_status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreceive_topic_message(::grpc::ServerContext* context, ::mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom::message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestacknowledge_message(::grpc::ServerContext* context, ::mom::message_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_join_cluster() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestjoin_cluster(::grpc::ServerContext* context, ::mom::node_info* request, ::grpc::ServerAsyncResponseWriter< ::mom::cluster_info>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_leave_cluster() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestleave_cluster(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_heartbeat() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestheartbeat(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_cluster_state(::grpc::ServerContext* context, ::mom::NodeID* request, ::grpc::ServerAsyncResponseWriter< ::mom::cluster_state>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sync_topics<WithAsyncMethod_sync_queues<WithAsyncMethod_create_queue<WithAsyncMethod_delete_queue<WithAsyncMethod_list_queues<WithAsyncMethod_get_queue_info<WithAsyncMethod_create_topic<WithAsyncMethod_delete_topic<WithAsyncMethod_list_topics<WithAsyncMethod_get_topic_info<WithAsyncMethod_subscribe_topic<WithAsyncMethod_unsubscribe_topic<WithAsyncMethod_send_queue_message<WithAsyncMethod_receive_queue_message<WithAsyncMethod_publish_topic_message<WithAsyncMethod_receive_topic_message<WithAsyncMethod_acknowledge_message<WithAsyncMethod_join_cluster<WithAsyncMethod_leave_cluster<WithAsyncMethod_heartbeat<WithAsyncMethod_get_cluster_state<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sync_topics() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::sync_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::sync_response* response) { return this->sync_topics(context, request, response); }));}
    void SetMessageAllocatorFor_sync_topics(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::sync_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::sync_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_topics(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sync_queues() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::sync_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::sync_response* response) { return this->sync_queues(context, request, response); }));}
    void SetMessageAllocatorFor_sync_queues(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::sync_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::sync_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_queues(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create_queue() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_config, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_config* request, ::mom::status* response) { return this->create_queue(context, request, response); }));}
    void SetMessageAllocatorFor_create_queue(
        ::grpc::MessageAllocator< ::mom::queue_config, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_config, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_delete_queue() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_identifier* request, ::mom::status* response) { return this->delete_queue(context, request, response); }));}
    void SetMessageAllocatorFor_delete_queue(
        ::grpc::MessageAllocator< ::mom::queue_identifier, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delete_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_queues() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::queues_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::queues_response* response) { return this->list_queues(context, request, response); }));}
    void SetMessageAllocatorFor_list_queues(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::queues_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::queues_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_queues(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_queue_info() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::queue>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_identifier* request, ::mom::queue* response) { return this->get_queue_info(context, request, response); }));}
    void SetMessageAllocatorFor_get_queue_info(
        ::grpc::MessageAllocator< ::mom::queue_identifier, ::mom::queue>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::queue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_queue_info(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_create_topic() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_config, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_config* request, ::mom::status* response) { return this->create_topic(context, request, response); }));}
    void SetMessageAllocatorFor_create_topic(
        ::grpc::MessageAllocator< ::mom::topic_config, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_config, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_delete_topic() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_identifier, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_identifier* request, ::mom::status* response) { return this->delete_topic(context, request, response); }));}
    void SetMessageAllocatorFor_delete_topic(
        ::grpc::MessageAllocator< ::mom::topic_identifier, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_identifier, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delete_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_topics() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::topics_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::topics_response* response) { return this->list_topics(context, request, response); }));}
    void SetMessageAllocatorFor_list_topics(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::topics_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::topics_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_topics(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_topic_info() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_identifier, ::mom::topic>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_identifier* request, ::mom::topic* response) { return this->get_topic_info(context, request, response); }));}
    void SetMessageAllocatorFor_get_topic_info(
        ::grpc::MessageAllocator< ::mom::topic_identifier, ::mom::topic>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_identifier, ::mom::topic>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_topic_info(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_subscription* request, ::mom::status* response) { return this->subscribe_topic(context, request, response); }));}
    void SetMessageAllocatorFor_subscribe_topic(
        ::grpc::MessageAllocator< ::mom::topic_subscription, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* subscribe_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_subscription* request, ::mom::status* response) { return this->unsubscribe_topic(context, request, response); }));}
    void SetMessageAllocatorFor_unsubscribe_topic(
        ::grpc::MessageAllocator< ::mom::topic_subscription, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unsubscribe_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_send_queue_message() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_message, ::mom::message_status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_message* request, ::mom::message_status* response) { return this->send_queue_message(context, request, response); }));}
    void SetMessageAllocatorFor_send_queue_message(
        ::grpc::MessageAllocator< ::mom::queue_message, ::mom::message_status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_message, ::mom::message_status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* send_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_identifier* request, ::mom::message* response) { return this->receive_queue_message(context, request, response); }));}
    void SetMessageAllocatorFor_receive_queue_message(
        ::grpc::MessageAllocator< ::mom::queue_identifier, ::mom::message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_identifier, ::mom::message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* receive_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_message, ::mom::message_status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_message* request, ::mom::message_status* response) { return this->publish_topic_message(context, request, response); }));}
    void SetMessageAllocatorFor_publish_topic_message(
        ::grpc::MessageAllocator< ::mom::topic_message, ::mom::message_status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_message, ::mom::message_status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* publish_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_subscription* request, ::mom::message* response) { return this->receive_topic_message(context, request, response); }));}
    void SetMessageAllocatorFor_receive_topic_message(
        ::grpc::MessageAllocator< ::mom::topic_subscription, ::mom::message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_subscription, ::mom::message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* receive_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::message_identifier, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::message_identifier* request, ::mom::status* response) { return this->acknowledge_message(context, request, response); }));}
    void SetMessageAllocatorFor_acknowledge_message(
        ::grpc::MessageAllocator< ::mom::message_identifier, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::message_identifier, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* acknowledge_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_join_cluster() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::node_info, ::mom::cluster_info>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::node_info* request, ::mom::cluster_info* response) { return this->join_cluster(context, request, response); }));}
    void SetMessageAllocatorFor_join_cluster(
        ::grpc::MessageAllocator< ::mom::node_info, ::mom::cluster_info>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::node_info, ::mom::cluster_info>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* join_cluster(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_leave_cluster() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::status* response) { return this->leave_cluster(context, request, response); }));}
    void SetMessageAllocatorFor_leave_cluster(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* leave_cluster(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_heartbeat() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::status* response) { return this->heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_heartbeat(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::cluster_state>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::NodeID* request, ::mom::cluster_state* response) { return this->get_cluster_state(context, request, response); }));}
    void SetMessageAllocatorFor_get_cluster_state(
        ::grpc::MessageAllocator< ::mom::NodeID, ::mom::cluster_state>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::NodeID, ::mom::cluster_state>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_cluster_state(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sync_topics<WithCallbackMethod_sync_queues<WithCallbackMethod_create_queue<WithCallbackMethod_delete_queue<WithCallbackMethod_list_queues<WithCallbackMethod_get_queue_info<WithCallbackMethod_create_topic<WithCallbackMethod_delete_topic<WithCallbackMethod_list_topics<WithCallbackMethod_get_topic_info<WithCallbackMethod_subscribe_topic<WithCallbackMethod_unsubscribe_topic<WithCallbackMethod_send_queue_message<WithCallbackMethod_receive_queue_message<WithCallbackMethod_publish_topic_message<WithCallbackMethod_receive_topic_message<WithCallbackMethod_acknowledge_message<WithCallbackMethod_join_cluster<WithCallbackMethod_leave_cluster<WithCallbackMethod_heartbeat<WithCallbackMethod_get_cluster_state<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sync_topics() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sync_queues() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create_queue() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_delete_queue() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_queues() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_queue_info() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_create_topic() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_delete_topic() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_topics() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_topic_info() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_send_queue_message() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_join_cluster() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_leave_cluster() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_heartbeat() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sync_topics() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_topics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sync_queues() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsync_queues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create_queue() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate_queue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_delete_queue() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdelete_queue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_queues() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_queues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_queue_info() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_queue_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_create_topic() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_delete_topic() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdelete_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_topics() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_topics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_topic_info() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_topic_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsubscribe_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestunsubscribe_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_send_queue_message() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend_queue_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreceive_queue_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestpublish_topic_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreceive_topic_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestacknowledge_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_join_cluster() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestjoin_cluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_leave_cluster() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestleave_cluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_heartbeat() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestheartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_cluster_state(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sync_topics() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sync_topics(context, request, response); }));
    }
    ~WithRawCallbackMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_topics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sync_queues() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sync_queues(context, request, response); }));
    }
    ~WithRawCallbackMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sync_queues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create_queue() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create_queue(context, request, response); }));
    }
    ~WithRawCallbackMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_delete_queue() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->delete_queue(context, request, response); }));
    }
    ~WithRawCallbackMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delete_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_queues() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->list_queues(context, request, response); }));
    }
    ~WithRawCallbackMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_queues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_queue_info() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_queue_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_queue_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_create_topic() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->create_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* create_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_delete_topic() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->delete_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* delete_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_topics() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->list_topics(context, request, response); }));
    }
    ~WithRawCallbackMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* list_topics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_topic_info() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_topic_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_topic_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->subscribe_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* subscribe_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unsubscribe_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unsubscribe_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_send_queue_message() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->send_queue_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* send_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->receive_queue_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* receive_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->publish_topic_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* publish_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->receive_topic_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* receive_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->acknowledge_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* acknowledge_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_join_cluster() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->join_cluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* join_cluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_leave_cluster() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->leave_cluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* leave_cluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_cluster_state(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_cluster_state(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sync_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sync_topics() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::sync_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::sync_response>* streamer) {
                       return this->Streamedsync_topics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sync_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sync_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsync_topics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::sync_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sync_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sync_queues() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::sync_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::sync_response>* streamer) {
                       return this->Streamedsync_queues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sync_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sync_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::sync_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsync_queues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::sync_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create_queue() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_config, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_config, ::mom::status>* streamer) {
                       return this->Streamedcreate_queue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate_queue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_config,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_delete_queue() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_identifier, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_identifier, ::mom::status>* streamer) {
                       return this->Streameddelete_queue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status delete_queue(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddelete_queue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_identifier,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_queues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_list_queues() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::queues_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::queues_response>* streamer) {
                       return this->Streamedlist_queues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_list_queues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_queues(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_queues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::queues_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_queue_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_queue_info() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_identifier, ::mom::queue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_identifier, ::mom::queue>* streamer) {
                       return this->Streamedget_queue_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_queue_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_queue_info(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::queue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_queue_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_identifier,::mom::queue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_create_topic() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_config, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_config, ::mom::status>* streamer) {
                       return this->Streamedcreate_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_create_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_config,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_delete_topic() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_identifier, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_identifier, ::mom::status>* streamer) {
                       return this->Streameddelete_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status delete_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddelete_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_identifier,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_topics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_list_topics() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::topics_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::topics_response>* streamer) {
                       return this->Streamedlist_topics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_list_topics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_topics(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_topics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::topics_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_topic_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_topic_info() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_identifier, ::mom::topic>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_identifier, ::mom::topic>* streamer) {
                       return this->Streamedget_topic_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_topic_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_topic_info(::grpc::ServerContext* /*context*/, const ::mom::topic_identifier* /*request*/, ::mom::topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_topic_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_identifier,::mom::topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_subscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_subscribe_topic() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_subscription, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_subscription, ::mom::status>* streamer) {
                       return this->Streamedsubscribe_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_subscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status subscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsubscribe_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_subscription,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unsubscribe_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unsubscribe_topic() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_subscription, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_subscription, ::mom::status>* streamer) {
                       return this->Streamedunsubscribe_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unsubscribe_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unsubscribe_topic(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedunsubscribe_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_subscription,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_send_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_send_queue_message() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_message, ::mom::message_status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_message, ::mom::message_status>* streamer) {
                       return this->Streamedsend_queue_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_send_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status send_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsend_queue_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_message,::mom::message_status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_receive_queue_message() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_identifier, ::mom::message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_identifier, ::mom::message>* streamer) {
                       return this->Streamedreceive_queue_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom::queue_identifier* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreceive_queue_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_identifier,::mom::message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_publish_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_publish_topic_message() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_message, ::mom::message_status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_message, ::mom::message_status>* streamer) {
                       return this->Streamedpublish_topic_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_publish_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status publish_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_message* /*request*/, ::mom::message_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedpublish_topic_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_message,::mom::message_status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_receive_topic_message() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_subscription, ::mom::message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_subscription, ::mom::message>* streamer) {
                       return this->Streamedreceive_topic_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom::topic_subscription* /*request*/, ::mom::message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreceive_topic_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_subscription,::mom::message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_acknowledge_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_acknowledge_message() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::message_identifier, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::message_identifier, ::mom::status>* streamer) {
                       return this->Streamedacknowledge_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_acknowledge_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status acknowledge_message(::grpc::ServerContext* /*context*/, const ::mom::message_identifier* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedacknowledge_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::message_identifier,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_join_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_join_cluster() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::node_info, ::mom::cluster_info>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::node_info, ::mom::cluster_info>* streamer) {
                       return this->Streamedjoin_cluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_join_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status join_cluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::cluster_info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedjoin_cluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::node_info,::mom::cluster_info>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_leave_cluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_leave_cluster() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::status>* streamer) {
                       return this->Streamedleave_cluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_leave_cluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status leave_cluster(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedleave_cluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_heartbeat() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::status>* streamer) {
                       return this->Streamedheartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status heartbeat(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedheartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_cluster_state : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_cluster_state() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::NodeID, ::mom::cluster_state>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::NodeID, ::mom::cluster_state>* streamer) {
                       return this->Streamedget_cluster_state(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_cluster_state() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_cluster_state(::grpc::ServerContext* /*context*/, const ::mom::NodeID* /*request*/, ::mom::cluster_state* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_cluster_state(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::NodeID,::mom::cluster_state>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sync_topics<WithStreamedUnaryMethod_sync_queues<WithStreamedUnaryMethod_create_queue<WithStreamedUnaryMethod_delete_queue<WithStreamedUnaryMethod_list_queues<WithStreamedUnaryMethod_get_queue_info<WithStreamedUnaryMethod_create_topic<WithStreamedUnaryMethod_delete_topic<WithStreamedUnaryMethod_list_topics<WithStreamedUnaryMethod_get_topic_info<WithStreamedUnaryMethod_subscribe_topic<WithStreamedUnaryMethod_unsubscribe_topic<WithStreamedUnaryMethod_send_queue_message<WithStreamedUnaryMethod_receive_queue_message<WithStreamedUnaryMethod_publish_topic_message<WithStreamedUnaryMethod_receive_topic_message<WithStreamedUnaryMethod_acknowledge_message<WithStreamedUnaryMethod_join_cluster<WithStreamedUnaryMethod_leave_cluster<WithStreamedUnaryMethod_heartbeat<WithStreamedUnaryMethod_get_cluster_state<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sync_topics<WithStreamedUnaryMethod_sync_queues<WithStreamedUnaryMethod_create_queue<WithStreamedUnaryMethod_delete_queue<WithStreamedUnaryMethod_list_queues<WithStreamedUnaryMethod_get_queue_info<WithStreamedUnaryMethod_create_topic<WithStreamedUnaryMethod_delete_topic<WithStreamedUnaryMethod_list_topics<WithStreamedUnaryMethod_get_topic_info<WithStreamedUnaryMethod_subscribe_topic<WithStreamedUnaryMethod_unsubscribe_topic<WithStreamedUnaryMethod_send_queue_message<WithStreamedUnaryMethod_receive_queue_message<WithStreamedUnaryMethod_publish_topic_message<WithStreamedUnaryMethod_receive_topic_message<WithStreamedUnaryMethod_acknowledge_message<WithStreamedUnaryMethod_join_cluster<WithStreamedUnaryMethod_leave_cluster<WithStreamedUnaryMethod_heartbeat<WithStreamedUnaryMethod_get_cluster_state<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace mom


#endif  // GRPC_mom_2eproto__INCLUDED
