// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom_to_mom.proto

#include "mom_to_mom.pb.h"
#include "mom_to_mom.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mom_to_mom {

static const char* MOM_cluster_service_method_names[] = {
  "/mom_to_mom.MOM_cluster_service/replicate_topic",
  "/mom_to_mom.MOM_cluster_service/replicate_queue",
  "/mom_to_mom.MOM_cluster_service/replicate_delete_queue",
  "/mom_to_mom.MOM_cluster_service/replicate_delete_topic",
  "/mom_to_mom.MOM_cluster_service/replicate_topic_subscription",
  "/mom_to_mom.MOM_cluster_service/replicate_topic_unsubscription",
  "/mom_to_mom.MOM_cluster_service/replicate_queue_message",
  "/mom_to_mom.MOM_cluster_service/replicate_topic_message",
  "/mom_to_mom.MOM_cluster_service/replicate_receive_queue_message",
  "/mom_to_mom.MOM_cluster_service/replicate_receive_topic_message",
};

std::unique_ptr< MOM_cluster_service::Stub> MOM_cluster_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MOM_cluster_service::Stub> stub(new MOM_cluster_service::Stub(channel, options));
  return stub;
}

MOM_cluster_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_replicate_topic_(MOM_cluster_service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_queue_(MOM_cluster_service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_delete_queue_(MOM_cluster_service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_delete_topic_(MOM_cluster_service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_topic_subscription_(MOM_cluster_service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_topic_unsubscription_(MOM_cluster_service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_queue_message_(MOM_cluster_service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_topic_message_(MOM_cluster_service_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_receive_queue_message_(MOM_cluster_service_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_replicate_receive_topic_message_(MOM_cluster_service_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MOM_cluster_service::Stub::replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_topic_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::topic, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_queue_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_queue_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_queue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::queue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_queue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_queueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_delete_queue_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_delete_queue_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_delete_queue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::queue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_delete_queue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_delete_queueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_delete_topic_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_delete_topic_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_delete_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::topic, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_delete_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_delete_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_topic_subscription_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_subscription_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_subscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::topic_subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_topic_subscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_topic_subscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_topic_unsubscription_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_unsubscription_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_unsubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::topic_subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_topic_unsubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_topic_unsubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_queue_message_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_queue_message_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_queue_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_queue_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_queue_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_topic_message_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_message_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_topic_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::PrepareAsyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::status, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_topic_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* MOM_cluster_service::Stub::Asyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_topic_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::mom_to_mom::structure_message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_receive_queue_message_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_receive_queue_message_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_receive_queue_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* MOM_cluster_service::Stub::PrepareAsyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::structure_message, ::mom_to_mom::queue_identifier, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_receive_queue_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* MOM_cluster_service::Stub::Asyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_receive_queue_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_cluster_service::Stub::replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::structure_message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_replicate_receive_topic_message_, context, request, response);
}

void MOM_cluster_service::Stub::async::replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_receive_topic_message_, context, request, response, std::move(f));
}

void MOM_cluster_service::Stub::async::replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_replicate_receive_topic_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* MOM_cluster_service::Stub::PrepareAsyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom_to_mom::structure_message, ::mom_to_mom::topic_subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_replicate_receive_topic_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* MOM_cluster_service::Stub::Asyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreplicate_receive_topic_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

MOM_cluster_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::topic* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::queue* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_queue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::queue, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::queue* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_delete_queue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::topic, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::topic* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_delete_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::topic_subscription* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_topic_subscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::topic_subscription, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::topic_subscription* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_topic_unsubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::structure_message* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_queue_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::structure_message, ::mom_to_mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::structure_message* req,
             ::mom_to_mom::status* resp) {
               return service->replicate_topic_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::queue_identifier* req,
             ::mom_to_mom::structure_message* resp) {
               return service->replicate_receive_queue_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_cluster_service_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_cluster_service::Service, ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_cluster_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom_to_mom::topic_subscription* req,
             ::mom_to_mom::structure_message* resp) {
               return service->replicate_receive_topic_message(ctx, req, resp);
             }, this)));
}

MOM_cluster_service::Service::~Service() {
}

::grpc::Status MOM_cluster_service::Service::replicate_topic(::grpc::ServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_queue(::grpc::ServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_delete_queue(::grpc::ServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_delete_topic(::grpc::ServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_topic_subscription(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_topic_unsubscription(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_queue_message(::grpc::ServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_topic_message(::grpc::ServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_receive_queue_message(::grpc::ServerContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_cluster_service::Service::replicate_receive_topic_message(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mom_to_mom

