// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom.proto
#ifndef GRPC_mom_2eproto__INCLUDED
#define GRPC_mom_2eproto__INCLUDED

#include "mom.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace mom {

// Servicio principal ya definido por ti
class MOM_service final {
 public:
  static constexpr char const* service_full_name() {
    return "mom.MOM_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::state_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>> AsyncSyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>>(AsyncSyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>> PrepareAsyncSyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>>(PrepareAsyncSyncStateRaw(context, request, cq));
    }
    virtual ::grpc::Status SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::topics_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>> AsyncSyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>>(AsyncSyncTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>> PrepareAsyncSyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>>(PrepareAsyncSyncTopicsRaw(context, request, cq));
    }
    virtual ::grpc::Status SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::queues_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>> AsyncSyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>>(AsyncSyncQueuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>> PrepareAsyncSyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>>(PrepareAsyncSyncQueuesRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::mom::replication_status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>> AsyncReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>>(AsyncReplicateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>> PrepareAsyncReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>>(PrepareAsyncReplicateMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::config_status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>> AsyncReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>>(AsyncReplicateTopicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>> PrepareAsyncReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>>(PrepareAsyncReplicateTopicConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::config_status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>> AsyncReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>>(AsyncReplicateQueueConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>> PrepareAsyncReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>>(PrepareAsyncReplicateQueueConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status JoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::clusterInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>> AsyncJoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>>(AsyncJoinClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>> PrepareAsyncJoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>>(PrepareAsyncJoinClusterRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> AsyncLeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(AsyncLeaveClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncLeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncLeaveClusterRaw(context, request, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> AsyncHeartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>* AsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::state_response>* PrepareAsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>* AsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::topics_response>* PrepareAsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>* AsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::queues_response>* PrepareAsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>* AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::replication_status>* PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>* AsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>* PrepareAsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>* AsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::config_status>* PrepareAsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>* AsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::clusterInfo>* PrepareAsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* AsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom::status>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::state_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::state_response>> AsyncSyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::state_response>>(AsyncSyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::state_response>> PrepareAsyncSyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::state_response>>(PrepareAsyncSyncStateRaw(context, request, cq));
    }
    ::grpc::Status SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::topics_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>> AsyncSyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>>(AsyncSyncTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>> PrepareAsyncSyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::topics_response>>(PrepareAsyncSyncTopicsRaw(context, request, cq));
    }
    ::grpc::Status SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::queues_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>> AsyncSyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>>(AsyncSyncQueuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>> PrepareAsyncSyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::queues_response>>(PrepareAsyncSyncQueuesRaw(context, request, cq));
    }
    ::grpc::Status ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::mom::replication_status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::replication_status>> AsyncReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::replication_status>>(AsyncReplicateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::replication_status>> PrepareAsyncReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::replication_status>>(PrepareAsyncReplicateMessageRaw(context, request, cq));
    }
    ::grpc::Status ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::config_status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>> AsyncReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>>(AsyncReplicateTopicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>> PrepareAsyncReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>>(PrepareAsyncReplicateTopicConfigRaw(context, request, cq));
    }
    ::grpc::Status ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::config_status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>> AsyncReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>>(AsyncReplicateQueueConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>> PrepareAsyncReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::config_status>>(PrepareAsyncReplicateQueueConfigRaw(context, request, cq));
    }
    ::grpc::Status JoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::clusterInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>> AsyncJoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>>(AsyncJoinClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>> PrepareAsyncJoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>>(PrepareAsyncJoinClusterRaw(context, request, cq));
    }
    ::grpc::Status LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> AsyncLeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(AsyncLeaveClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncLeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncLeaveClusterRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> AsyncHeartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom::status>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)>) override;
      void SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, std::function<void(::grpc::Status)>) override;
      void SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, std::function<void(::grpc::Status)>) override;
      void SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, std::function<void(::grpc::Status)>) override;
      void ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)>) override;
      void ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)>) override;
      void ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, std::function<void(::grpc::Status)>) override;
      void JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mom::state_response>* AsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::state_response>* PrepareAsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topics_response>* AsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::topics_response>* PrepareAsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queues_response>* AsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::queues_response>* PrepareAsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::replication_status>* AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::replication_status>* PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::config_status>* AsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::config_status>* PrepareAsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::config_status>* AsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::config_status>* PrepareAsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>* AsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>* PrepareAsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* AsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom::status>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SyncState_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncTopics_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncQueues_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateTopicConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateQueueConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SyncState(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::state_response* response);
    virtual ::grpc::Status SyncTopics(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response);
    virtual ::grpc::Status SyncQueues(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response);
    virtual ::grpc::Status ReplicateMessage(::grpc::ServerContext* context, const ::mom::Message* request, ::mom::replication_status* response);
    virtual ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* context, const ::mom::topic_config* request, ::mom::config_status* response);
    virtual ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* context, const ::mom::queue_config* request, ::mom::config_status* response);
    virtual ::grpc::Status JoinCluster(::grpc::ServerContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response);
    virtual ::grpc::Status LeaveCluster(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::status* response);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncState(::grpc::ServerContext* context, ::mom::Node_ID* request, ::grpc::ServerAsyncResponseWriter< ::mom::state_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncTopics() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncTopics(::grpc::ServerContext* context, ::mom::Node_ID* request, ::grpc::ServerAsyncResponseWriter< ::mom::topics_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncQueues() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncQueues(::grpc::ServerContext* context, ::mom::Node_ID* request, ::grpc::ServerAsyncResponseWriter< ::mom::queues_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateMessage(::grpc::ServerContext* context, ::mom::Message* request, ::grpc::ServerAsyncResponseWriter< ::mom::replication_status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateTopicConfig(::grpc::ServerContext* context, ::mom::topic_config* request, ::grpc::ServerAsyncResponseWriter< ::mom::config_status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateQueueConfig(::grpc::ServerContext* context, ::mom::queue_config* request, ::grpc::ServerAsyncResponseWriter< ::mom::config_status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinCluster() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinCluster(::grpc::ServerContext* context, ::mom::node_info* request, ::grpc::ServerAsyncResponseWriter< ::mom::clusterInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveCluster(::grpc::ServerContext* context, ::mom::Node_ID* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::mom::Node_ID* request, ::grpc::ServerAsyncResponseWriter< ::mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SyncState<WithAsyncMethod_SyncTopics<WithAsyncMethod_SyncQueues<WithAsyncMethod_ReplicateMessage<WithAsyncMethod_ReplicateTopicConfig<WithAsyncMethod_ReplicateQueueConfig<WithAsyncMethod_JoinCluster<WithAsyncMethod_LeaveCluster<WithAsyncMethod_Heartbeat<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::state_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Node_ID* request, ::mom::state_response* response) { return this->SyncState(context, request, response); }));}
    void SetMessageAllocatorFor_SyncState(
        ::grpc::MessageAllocator< ::mom::Node_ID, ::mom::state_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::state_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncState(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncTopics() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::topics_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response) { return this->SyncTopics(context, request, response); }));}
    void SetMessageAllocatorFor_SyncTopics(
        ::grpc::MessageAllocator< ::mom::Node_ID, ::mom::topics_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::topics_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncTopics(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncQueues() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::queues_response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response) { return this->SyncQueues(context, request, response); }));}
    void SetMessageAllocatorFor_SyncQueues(
        ::grpc::MessageAllocator< ::mom::Node_ID, ::mom::queues_response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::queues_response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncQueues(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Message, ::mom::replication_status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Message* request, ::mom::replication_status* response) { return this->ReplicateMessage(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateMessage(
        ::grpc::MessageAllocator< ::mom::Message, ::mom::replication_status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Message, ::mom::replication_status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::topic_config, ::mom::config_status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::topic_config* request, ::mom::config_status* response) { return this->ReplicateTopicConfig(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateTopicConfig(
        ::grpc::MessageAllocator< ::mom::topic_config, ::mom::config_status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::topic_config, ::mom::config_status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateTopicConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::queue_config, ::mom::config_status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::queue_config* request, ::mom::config_status* response) { return this->ReplicateQueueConfig(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateQueueConfig(
        ::grpc::MessageAllocator< ::mom::queue_config, ::mom::config_status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::queue_config, ::mom::config_status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateQueueConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_JoinCluster() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::node_info, ::mom::clusterInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response) { return this->JoinCluster(context, request, response); }));}
    void SetMessageAllocatorFor_JoinCluster(
        ::grpc::MessageAllocator< ::mom::node_info, ::mom::clusterInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::node_info, ::mom::clusterInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Node_ID* request, ::mom::status* response) { return this->LeaveCluster(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveCluster(
        ::grpc::MessageAllocator< ::mom::Node_ID, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom::Node_ID* request, ::mom::status* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::mom::Node_ID, ::mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom::Node_ID, ::mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SyncState<WithCallbackMethod_SyncTopics<WithCallbackMethod_SyncQueues<WithCallbackMethod_ReplicateMessage<WithCallbackMethod_ReplicateTopicConfig<WithCallbackMethod_ReplicateQueueConfig<WithCallbackMethod_JoinCluster<WithCallbackMethod_LeaveCluster<WithCallbackMethod_Heartbeat<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncTopics() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncQueues() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinCluster() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncTopics() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncTopics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncQueues() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncQueues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateTopicConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateQueueConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinCluster() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncState(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncTopics() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncTopics(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncTopics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncQueues() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SyncQueues(context, request, response); }));
    }
    ~WithRawCallbackMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SyncQueues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateTopicConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateTopicConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateQueueConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateQueueConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_JoinCluster() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Node_ID, ::mom::state_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Node_ID, ::mom::state_response>* streamer) {
                       return this->StreamedSyncState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncState(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::state_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Node_ID,::mom::state_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncTopics() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Node_ID, ::mom::topics_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Node_ID, ::mom::topics_response>* streamer) {
                       return this->StreamedSyncTopics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncTopics(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::topics_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncTopics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Node_ID,::mom::topics_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SyncQueues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SyncQueues() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Node_ID, ::mom::queues_response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Node_ID, ::mom::queues_response>* streamer) {
                       return this->StreamedSyncQueues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SyncQueues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncQueues(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::queues_response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSyncQueues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Node_ID,::mom::queues_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Message, ::mom::replication_status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Message, ::mom::replication_status>* streamer) {
                       return this->StreamedReplicateMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateMessage(::grpc::ServerContext* /*context*/, const ::mom::Message* /*request*/, ::mom::replication_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Message,::mom::replication_status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateTopicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateTopicConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::topic_config, ::mom::config_status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::topic_config, ::mom::config_status>* streamer) {
                       return this->StreamedReplicateTopicConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateTopicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateTopicConfig(::grpc::ServerContext* /*context*/, const ::mom::topic_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateTopicConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::topic_config,::mom::config_status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateQueueConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateQueueConfig() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::queue_config, ::mom::config_status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::queue_config, ::mom::config_status>* streamer) {
                       return this->StreamedReplicateQueueConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateQueueConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateQueueConfig(::grpc::ServerContext* /*context*/, const ::mom::queue_config* /*request*/, ::mom::config_status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateQueueConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::queue_config,::mom::config_status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinCluster() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::node_info, ::mom::clusterInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::node_info, ::mom::clusterInfo>* streamer) {
                       return this->StreamedJoinCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinCluster(::grpc::ServerContext* /*context*/, const ::mom::node_info* /*request*/, ::mom::clusterInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::node_info,::mom::clusterInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveCluster() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Node_ID, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Node_ID, ::mom::status>* streamer) {
                       return this->StreamedLeaveCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveCluster(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Node_ID,::mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom::Node_ID, ::mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom::Node_ID, ::mom::status>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::mom::Node_ID* /*request*/, ::mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom::Node_ID,::mom::status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SyncState<WithStreamedUnaryMethod_SyncTopics<WithStreamedUnaryMethod_SyncQueues<WithStreamedUnaryMethod_ReplicateMessage<WithStreamedUnaryMethod_ReplicateTopicConfig<WithStreamedUnaryMethod_ReplicateQueueConfig<WithStreamedUnaryMethod_JoinCluster<WithStreamedUnaryMethod_LeaveCluster<WithStreamedUnaryMethod_Heartbeat<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SyncState<WithStreamedUnaryMethod_SyncTopics<WithStreamedUnaryMethod_SyncQueues<WithStreamedUnaryMethod_ReplicateMessage<WithStreamedUnaryMethod_ReplicateTopicConfig<WithStreamedUnaryMethod_ReplicateQueueConfig<WithStreamedUnaryMethod_JoinCluster<WithStreamedUnaryMethod_LeaveCluster<WithStreamedUnaryMethod_Heartbeat<Service > > > > > > > > > StreamedService;
};

}  // namespace mom


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_mom_2eproto__INCLUDED
