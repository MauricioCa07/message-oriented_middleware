// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom.proto

#include "mom.pb.h"
#include "mom.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mom {

static const char* MOM_service_method_names[] = {
  "/mom.MOM_service/SyncState",
  "/mom.MOM_service/SyncTopics",
  "/mom.MOM_service/SyncQueues",
  "/mom.MOM_service/ReplicateMessage",
  "/mom.MOM_service/ReplicateTopicConfig",
  "/mom.MOM_service/ReplicateQueueConfig",
  "/mom.MOM_service/JoinCluster",
  "/mom.MOM_service/LeaveCluster",
  "/mom.MOM_service/Heartbeat",
};

std::unique_ptr< MOM_service::Stub> MOM_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MOM_service::Stub> stub(new MOM_service::Stub(channel, options));
  return stub;
}

MOM_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SyncState_(MOM_service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncTopics_(MOM_service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncQueues_(MOM_service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplicateMessage_(MOM_service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplicateTopicConfig_(MOM_service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReplicateQueueConfig_(MOM_service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinCluster_(MOM_service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveCluster_(MOM_service_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(MOM_service_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MOM_service::Stub::SyncState(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::state_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncState_, context, request, response);
}

void MOM_service::Stub::async::SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncState_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::SyncState(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::PrepareAsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::state_response, ::mom::Node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::AsyncSyncStateRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::topics_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Node_ID, ::mom::topics_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncTopics_, context, request, response);
}

void MOM_service::Stub::async::SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Node_ID, ::mom::topics_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncTopics_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::SyncTopics(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncTopics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::topics_response>* MOM_service::Stub::PrepareAsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::topics_response, ::mom::Node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncTopics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::topics_response>* MOM_service::Stub::AsyncSyncTopicsRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncTopicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::queues_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Node_ID, ::mom::queues_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SyncQueues_, context, request, response);
}

void MOM_service::Stub::async::SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Node_ID, ::mom::queues_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncQueues_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::SyncQueues(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SyncQueues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::queues_response>* MOM_service::Stub::PrepareAsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::queues_response, ::mom::Node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SyncQueues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::queues_response>* MOM_service::Stub::AsyncSyncQueuesRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncQueuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message& request, ::mom::replication_status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Message, ::mom::replication_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplicateMessage_, context, request, response);
}

void MOM_service::Stub::async::ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Message, ::mom::replication_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::ReplicateMessage(::grpc::ClientContext* context, const ::mom::Message* request, ::mom::replication_status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::replication_status>* MOM_service::Stub::PrepareAsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::replication_status, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplicateMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::replication_status>* MOM_service::Stub::AsyncReplicateMessageRaw(::grpc::ClientContext* context, const ::mom::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplicateMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::config_status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplicateTopicConfig_, context, request, response);
}

void MOM_service::Stub::async::ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateTopicConfig_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::ReplicateTopicConfig(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateTopicConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::config_status>* MOM_service::Stub::PrepareAsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::config_status, ::mom::topic_config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplicateTopicConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::config_status>* MOM_service::Stub::AsyncReplicateTopicConfigRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplicateTopicConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::config_status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::queue_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReplicateQueueConfig_, context, request, response);
}

void MOM_service::Stub::async::ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::queue_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateQueueConfig_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::ReplicateQueueConfig(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::config_status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReplicateQueueConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::config_status>* MOM_service::Stub::PrepareAsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::config_status, ::mom::queue_config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReplicateQueueConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::config_status>* MOM_service::Stub::AsyncReplicateQueueConfigRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReplicateQueueConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::JoinCluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::clusterInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_info, ::mom::clusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinCluster_, context, request, response);
}

void MOM_service::Stub::async::JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_info, ::mom::clusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinCluster_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::JoinCluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>* MOM_service::Stub::PrepareAsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::clusterInfo, ::mom::node_info, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::clusterInfo>* MOM_service::Stub::AsyncJoinClusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeaveCluster_, context, request, response);
}

void MOM_service::Stub::async::LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveCluster_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::LeaveCluster(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::Node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeaveCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::AsyncLeaveClusterRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeaveClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void MOM_service::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::mom::Node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::Node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mom::Node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

MOM_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Node_ID* req,
             ::mom::state_response* resp) {
               return service->SyncState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Node_ID, ::mom::topics_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Node_ID* req,
             ::mom::topics_response* resp) {
               return service->SyncTopics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Node_ID, ::mom::queues_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Node_ID* req,
             ::mom::queues_response* resp) {
               return service->SyncQueues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Message, ::mom::replication_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Message* req,
             ::mom::replication_status* resp) {
               return service->ReplicateMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_config* req,
             ::mom::config_status* resp) {
               return service->ReplicateTopicConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::queue_config, ::mom::config_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::queue_config* req,
             ::mom::config_status* resp) {
               return service->ReplicateQueueConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_info, ::mom::clusterInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_info* req,
             ::mom::clusterInfo* resp) {
               return service->JoinCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Node_ID* req,
             ::mom::status* resp) {
               return service->LeaveCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::Node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::Node_ID* req,
             ::mom::status* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
}

MOM_service::Service::~Service() {
}

::grpc::Status MOM_service::Service::SyncState(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::state_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::SyncTopics(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::topics_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::SyncQueues(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::queues_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::ReplicateMessage(::grpc::ServerContext* context, const ::mom::Message* request, ::mom::replication_status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::ReplicateTopicConfig(::grpc::ServerContext* context, const ::mom::topic_config* request, ::mom::config_status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::ReplicateQueueConfig(::grpc::ServerContext* context, const ::mom::queue_config* request, ::mom::config_status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::JoinCluster(::grpc::ServerContext* context, const ::mom::node_info* request, ::mom::clusterInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::LeaveCluster(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::Heartbeat(::grpc::ServerContext* context, const ::mom::Node_ID* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mom

