// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mom.proto
// Protobuf C++ Version: 5.29.0

#ifndef mom_2eproto_2epb_2eh
#define mom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mom_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mom_2eproto;
namespace mom {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_HeadersEntry_DoNotUse;
struct Message_HeadersEntry_DoNotUseDefaultTypeInternal;
extern Message_HeadersEntry_DoNotUseDefaultTypeInternal _Message_HeadersEntry_DoNotUse_default_instance_;
class cluster_info;
struct cluster_infoDefaultTypeInternal;
extern cluster_infoDefaultTypeInternal _cluster_info_default_instance_;
class cluster_info_QueueAssignmentsEntry_DoNotUse;
struct cluster_info_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_info_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_info_QueueAssignmentsEntry_DoNotUse_default_instance_;
class cluster_info_TopicAssignmentsEntry_DoNotUse;
struct cluster_info_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_info_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_info_TopicAssignmentsEntry_DoNotUse_default_instance_;
class cluster_state;
struct cluster_stateDefaultTypeInternal;
extern cluster_stateDefaultTypeInternal _cluster_state_default_instance_;
class cluster_state_QueueAssignmentsEntry_DoNotUse;
struct cluster_state_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_state_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_state_QueueAssignmentsEntry_DoNotUse_default_instance_;
class cluster_state_TopicAssignmentsEntry_DoNotUse;
struct cluster_state_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_state_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_state_TopicAssignmentsEntry_DoNotUse_default_instance_;
class message_status;
struct message_statusDefaultTypeInternal;
extern message_statusDefaultTypeInternal _message_status_default_instance_;
class node_ID;
struct node_IDDefaultTypeInternal;
extern node_IDDefaultTypeInternal _node_ID_default_instance_;
class node_assignment;
struct node_assignmentDefaultTypeInternal;
extern node_assignmentDefaultTypeInternal _node_assignment_default_instance_;
class node_info;
struct node_infoDefaultTypeInternal;
extern node_infoDefaultTypeInternal _node_info_default_instance_;
class queue;
struct queueDefaultTypeInternal;
extern queueDefaultTypeInternal _queue_default_instance_;
class queue_config;
struct queue_configDefaultTypeInternal;
extern queue_configDefaultTypeInternal _queue_config_default_instance_;
class queue_id;
struct queue_idDefaultTypeInternal;
extern queue_idDefaultTypeInternal _queue_id_default_instance_;
class queue_message;
struct queue_messageDefaultTypeInternal;
extern queue_messageDefaultTypeInternal _queue_message_default_instance_;
class queue_message_HeadersEntry_DoNotUse;
struct queue_message_HeadersEntry_DoNotUseDefaultTypeInternal;
extern queue_message_HeadersEntry_DoNotUseDefaultTypeInternal _queue_message_HeadersEntry_DoNotUse_default_instance_;
class state_response;
struct state_responseDefaultTypeInternal;
extern state_responseDefaultTypeInternal _state_response_default_instance_;
class status;
struct statusDefaultTypeInternal;
extern statusDefaultTypeInternal _status_default_instance_;
class topic;
struct topicDefaultTypeInternal;
extern topicDefaultTypeInternal _topic_default_instance_;
class topic_config;
struct topic_configDefaultTypeInternal;
extern topic_configDefaultTypeInternal _topic_config_default_instance_;
class topic_id;
struct topic_idDefaultTypeInternal;
extern topic_idDefaultTypeInternal _topic_id_default_instance_;
class topic_message;
struct topic_messageDefaultTypeInternal;
extern topic_messageDefaultTypeInternal _topic_message_default_instance_;
class topic_message_HeadersEntry_DoNotUse;
struct topic_message_HeadersEntry_DoNotUseDefaultTypeInternal;
extern topic_message_HeadersEntry_DoNotUseDefaultTypeInternal _topic_message_HeadersEntry_DoNotUse_default_instance_;
}  // namespace mom
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mom {

// ===================================================================


// -------------------------------------------------------------------

class topic_message_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  topic_message_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_message_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit topic_message_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const topic_message_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const topic_message_HeadersEntry_DoNotUse*>(
        &_topic_message_HeadersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class topic_id final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_id) */ {
 public:
  inline topic_id() : topic_id(nullptr) {}
  ~topic_id() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_id* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_id));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_id(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_id(const topic_id& from) : topic_id(nullptr, from) {}
  inline topic_id(topic_id&& from) noexcept
      : topic_id(nullptr, std::move(from)) {}
  inline topic_id& operator=(const topic_id& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_id& operator=(topic_id&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_id& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_id* internal_default_instance() {
    return reinterpret_cast<const topic_id*>(
        &_topic_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(topic_id& a, topic_id& b) { a.Swap(&b); }
  inline void Swap(topic_id* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_id* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_id* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_id>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_id& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_id& from) { topic_id::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_id* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_id"; }

 protected:
  explicit topic_id(::google::protobuf::Arena* arena);
  topic_id(::google::protobuf::Arena* arena, const topic_id& from);
  topic_id(::google::protobuf::Arena* arena, topic_id&& from) noexcept
      : topic_id(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicNameFieldNumber = 1,
  };
  // string topic_name = 1;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_id)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_id& from_msg);
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class topic_config final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_config) */ {
 public:
  inline topic_config() : topic_config(nullptr) {}
  ~topic_config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_config* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_config(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_config(const topic_config& from) : topic_config(nullptr, from) {}
  inline topic_config(topic_config&& from) noexcept
      : topic_config(nullptr, std::move(from)) {}
  inline topic_config& operator=(const topic_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_config& operator=(topic_config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_config& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_config* internal_default_instance() {
    return reinterpret_cast<const topic_config*>(
        &_topic_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(topic_config& a, topic_config& b) { a.Swap(&b); }
  inline void Swap(topic_config* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_config* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_config& from) { topic_config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_config* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_config"; }

 protected:
  explicit topic_config(::google::protobuf::Arena* arena);
  topic_config(::google::protobuf::Arena* arena, const topic_config& from);
  topic_config(::google::protobuf::Arena* arena, topic_config&& from) noexcept
      : topic_config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kCreationTimestampFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // int64 creation_timestamp = 3;
  void clear_creation_timestamp() ;
  ::int64_t creation_timestamp() const;
  void set_creation_timestamp(::int64_t value);

  private:
  ::int64_t _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_config& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::int64_t creation_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.status) */ {
 public:
  inline status() : status(nullptr) {}
  ~status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR status(
      ::google::protobuf::internal::ConstantInitialized);

  inline status(const status& from) : status(nullptr, from) {}
  inline status(status&& from) noexcept
      : status(nullptr, std::move(from)) {}
  inline status& operator=(const status& from) {
    CopyFrom(from);
    return *this;
  }
  inline status& operator=(status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const status& default_instance() {
    return *internal_default_instance();
  }
  static inline const status* internal_default_instance() {
    return reinterpret_cast<const status*>(
        &_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(status& a, status& b) { a.Swap(&b); }
  inline void Swap(status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const status& from) { status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.status"; }

 protected:
  explicit status(::google::protobuf::Arena* arena);
  status(::google::protobuf::Arena* arena, const status& from);
  status(::google::protobuf::Arena* arena, status&& from) noexcept
      : status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue_message_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  queue_message_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_message_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit queue_message_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const queue_message_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const queue_message_HeadersEntry_DoNotUse*>(
        &_queue_message_HeadersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class queue_id final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue_id) */ {
 public:
  inline queue_id() : queue_id(nullptr) {}
  ~queue_id() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_id* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_id));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_id(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_id(const queue_id& from) : queue_id(nullptr, from) {}
  inline queue_id(queue_id&& from) noexcept
      : queue_id(nullptr, std::move(from)) {}
  inline queue_id& operator=(const queue_id& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_id& operator=(queue_id&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_id& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_id* internal_default_instance() {
    return reinterpret_cast<const queue_id*>(
        &_queue_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(queue_id& a, queue_id& b) { a.Swap(&b); }
  inline void Swap(queue_id* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_id* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_id* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_id>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_id& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_id& from) { queue_id::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_id* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue_id"; }

 protected:
  explicit queue_id(::google::protobuf::Arena* arena);
  queue_id(::google::protobuf::Arena* arena, const queue_id& from);
  queue_id(::google::protobuf::Arena* arena, queue_id&& from) noexcept
      : queue_id(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQueueNameFieldNumber = 1,
  };
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // @@protoc_insertion_point(class_scope:mom.queue_id)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_id& from_msg);
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue_config final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue_config) */ {
 public:
  inline queue_config() : queue_config(nullptr) {}
  ~queue_config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_config* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_config(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_config(const queue_config& from) : queue_config(nullptr, from) {}
  inline queue_config(queue_config&& from) noexcept
      : queue_config(nullptr, std::move(from)) {}
  inline queue_config& operator=(const queue_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_config& operator=(queue_config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_config& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_config* internal_default_instance() {
    return reinterpret_cast<const queue_config*>(
        &_queue_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(queue_config& a, queue_config& b) { a.Swap(&b); }
  inline void Swap(queue_config* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_config* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_config& from) { queue_config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_config* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue_config"; }

 protected:
  explicit queue_config(::google::protobuf::Arena* arena);
  queue_config(::google::protobuf::Arena* arena, const queue_config& from);
  queue_config(::google::protobuf::Arena* arena, queue_config&& from) noexcept
      : queue_config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kCreationTimestampFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // int64 creation_timestamp = 3;
  void clear_creation_timestamp() ;
  ::int64_t creation_timestamp() const;
  void set_creation_timestamp(::int64_t value);

  private:
  ::int64_t _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.queue_config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_config& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::int64_t creation_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class node_info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.node_info) */ {
 public:
  inline node_info() : node_info(nullptr) {}
  ~node_info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_info(const node_info& from) : node_info(nullptr, from) {}
  inline node_info(node_info&& from) noexcept
      : node_info(nullptr, std::move(from)) {}
  inline node_info& operator=(const node_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_info& operator=(node_info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_info* internal_default_instance() {
    return reinterpret_cast<const node_info*>(
        &_node_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(node_info& a, node_info& b) { a.Swap(&b); }
  inline void Swap(node_info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_info& from) { node_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.node_info"; }

 protected:
  explicit node_info(::google::protobuf::Arena* arena);
  node_info(::google::protobuf::Arena* arena, const node_info& from);
  node_info(::google::protobuf::Arena* arena, node_info&& from) noexcept
      : node_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
    kHostFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string node_id = 1;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // string host = 2;
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* value);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.node_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_info& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::ArenaStringPtr host_;
    ::int32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class node_assignment final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.node_assignment) */ {
 public:
  inline node_assignment() : node_assignment(nullptr) {}
  ~node_assignment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_assignment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_assignment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_assignment(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_assignment(const node_assignment& from) : node_assignment(nullptr, from) {}
  inline node_assignment(node_assignment&& from) noexcept
      : node_assignment(nullptr, std::move(from)) {}
  inline node_assignment& operator=(const node_assignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_assignment& operator=(node_assignment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_assignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_assignment* internal_default_instance() {
    return reinterpret_cast<const node_assignment*>(
        &_node_assignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(node_assignment& a, node_assignment& b) { a.Swap(&b); }
  inline void Swap(node_assignment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_assignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_assignment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_assignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_assignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_assignment& from) { node_assignment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_assignment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.node_assignment"; }

 protected:
  explicit node_assignment(::google::protobuf::Arena* arena);
  node_assignment(::google::protobuf::Arena* arena, const node_assignment& from);
  node_assignment(::google::protobuf::Arena* arena, node_assignment&& from) noexcept
      : node_assignment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplicaNodesFieldNumber = 2,
    kPrimaryNodeFieldNumber = 1,
  };
  // repeated string replica_nodes = 2;
  int replica_nodes_size() const;
  private:
  int _internal_replica_nodes_size() const;

  public:
  void clear_replica_nodes() ;
  const std::string& replica_nodes(int index) const;
  std::string* mutable_replica_nodes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_replica_nodes(int index, Arg_&& value, Args_... args);
  std::string* add_replica_nodes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_replica_nodes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& replica_nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_replica_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_replica_nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_replica_nodes();

  public:
  // string primary_node = 1;
  void clear_primary_node() ;
  const std::string& primary_node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_node(Arg_&& arg, Args_... args);
  std::string* mutable_primary_node();
  PROTOBUF_NODISCARD std::string* release_primary_node();
  void set_allocated_primary_node(std::string* value);

  private:
  const std::string& _internal_primary_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_node(
      const std::string& value);
  std::string* _internal_mutable_primary_node();

  public:
  // @@protoc_insertion_point(class_scope:mom.node_assignment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_assignment& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> replica_nodes_;
    ::google::protobuf::internal::ArenaStringPtr primary_node_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class node_ID final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.node_ID) */ {
 public:
  inline node_ID() : node_ID(nullptr) {}
  ~node_ID() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_ID* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_ID));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_ID(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_ID(const node_ID& from) : node_ID(nullptr, from) {}
  inline node_ID(node_ID&& from) noexcept
      : node_ID(nullptr, std::move(from)) {}
  inline node_ID& operator=(const node_ID& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_ID& operator=(node_ID&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_ID& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_ID* internal_default_instance() {
    return reinterpret_cast<const node_ID*>(
        &_node_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(node_ID& a, node_ID& b) { a.Swap(&b); }
  inline void Swap(node_ID* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_ID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_ID* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_ID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_ID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_ID& from) { node_ID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_ID* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.node_ID"; }

 protected:
  explicit node_ID(::google::protobuf::Arena* arena);
  node_ID(::google::protobuf::Arena* arena, const node_ID& from);
  node_ID(::google::protobuf::Arena* arena, node_ID&& from) noexcept
      : node_ID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // @@protoc_insertion_point(class_scope:mom.node_ID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_ID& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class message_status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.message_status) */ {
 public:
  inline message_status() : message_status(nullptr) {}
  ~message_status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(message_status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(message_status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR message_status(
      ::google::protobuf::internal::ConstantInitialized);

  inline message_status(const message_status& from) : message_status(nullptr, from) {}
  inline message_status(message_status&& from) noexcept
      : message_status(nullptr, std::move(from)) {}
  inline message_status& operator=(const message_status& from) {
    CopyFrom(from);
    return *this;
  }
  inline message_status& operator=(message_status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const message_status& default_instance() {
    return *internal_default_instance();
  }
  static inline const message_status* internal_default_instance() {
    return reinterpret_cast<const message_status*>(
        &_message_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(message_status& a, message_status& b) { a.Swap(&b); }
  inline void Swap(message_status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message_status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  message_status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<message_status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const message_status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const message_status& from) { message_status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(message_status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.message_status"; }

 protected:
  explicit message_status(::google::protobuf::Arena* arena);
  message_status(::google::protobuf::Arena* arena, const message_status& from);
  message_status(::google::protobuf::Arena* arena, message_status&& from) noexcept
      : message_status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.message_status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const message_status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class Message_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Message_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Message_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Message_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Message_HeadersEntry_DoNotUse*>(
        &_Message_HeadersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class topic_message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_message) */ {
 public:
  inline topic_message() : topic_message(nullptr) {}
  ~topic_message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_message(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_message(const topic_message& from) : topic_message(nullptr, from) {}
  inline topic_message(topic_message&& from) noexcept
      : topic_message(nullptr, std::move(from)) {}
  inline topic_message& operator=(const topic_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_message& operator=(topic_message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_message* internal_default_instance() {
    return reinterpret_cast<const topic_message*>(
        &_topic_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(topic_message& a, topic_message& b) { a.Swap(&b); }
  inline void Swap(topic_message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_message& from) { topic_message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_message"; }

 protected:
  explicit topic_message(::google::protobuf::Arena* arena);
  topic_message(::google::protobuf::Arena* arena, const topic_message& from);
  topic_message(::google::protobuf::Arena* arena, topic_message&& from) noexcept
      : topic_message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeadersFieldNumber = 4,
    kTopicNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderFieldNumber = 3,
  };
  // map<string, string> headers = 4;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // string topic_name = 1;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 3;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_message& from_msg);
    ::google::protobuf::internal::MapField<topic_message_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue_message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue_message) */ {
 public:
  inline queue_message() : queue_message(nullptr) {}
  ~queue_message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_message(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_message(const queue_message& from) : queue_message(nullptr, from) {}
  inline queue_message(queue_message&& from) noexcept
      : queue_message(nullptr, std::move(from)) {}
  inline queue_message& operator=(const queue_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_message& operator=(queue_message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_message* internal_default_instance() {
    return reinterpret_cast<const queue_message*>(
        &_queue_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(queue_message& a, queue_message& b) { a.Swap(&b); }
  inline void Swap(queue_message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_message& from) { queue_message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue_message"; }

 protected:
  explicit queue_message(::google::protobuf::Arena* arena);
  queue_message(::google::protobuf::Arena* arena, const queue_message& from);
  queue_message(::google::protobuf::Arena* arena, queue_message&& from) noexcept
      : queue_message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeadersFieldNumber = 4,
    kQueueNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderFieldNumber = 3,
  };
  // map<string, string> headers = 4;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 3;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // @@protoc_insertion_point(class_scope:mom.queue_message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_message& from_msg);
    ::google::protobuf::internal::MapField<queue_message_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_state_TopicAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_state_TopicAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state_TopicAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_state_TopicAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_state_TopicAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_state_TopicAssignmentsEntry_DoNotUse*>(
        &_cluster_state_TopicAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class cluster_state_QueueAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_state_QueueAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state_QueueAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_state_QueueAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_state_QueueAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_state_QueueAssignmentsEntry_DoNotUse*>(
        &_cluster_state_QueueAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class cluster_info_TopicAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_info_TopicAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_info_TopicAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_info_TopicAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_info_TopicAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_info_TopicAssignmentsEntry_DoNotUse*>(
        &_cluster_info_TopicAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class cluster_info_QueueAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_info_QueueAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_info_QueueAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_info_QueueAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_info_QueueAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_info_QueueAssignmentsEntry_DoNotUse*>(
        &_cluster_info_QueueAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      50, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHeadersFieldNumber = 7,
    kIdFieldNumber = 1,
    kTopicOrQueueNameFieldNumber = 2,
    kContentFieldNumber = 4,
    kSenderFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kIsTopicFieldNumber = 3,
  };
  // map<string, string> headers = 7;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string topic_or_queue_name = 2;
  void clear_topic_or_queue_name() ;
  const std::string& topic_or_queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_or_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_or_queue_name();
  PROTOBUF_NODISCARD std::string* release_topic_or_queue_name();
  void set_allocated_topic_or_queue_name(std::string* value);

  private:
  const std::string& _internal_topic_or_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_or_queue_name(
      const std::string& value);
  std::string* _internal_mutable_topic_or_queue_name();

  public:
  // string content = 4;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 5;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // int64 timestamp = 6;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool is_topic = 3;
  void clear_is_topic() ;
  bool is_topic() const;
  void set_is_topic(bool value);

  private:
  bool _internal_is_topic() const;
  void _internal_set_is_topic(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::MapField<Message_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr topic_or_queue_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::int64_t timestamp_;
    bool is_topic_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class topic final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic) */ {
 public:
  inline topic() : topic(nullptr) {}
  ~topic() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic(const topic& from) : topic(nullptr, from) {}
  inline topic(topic&& from) noexcept
      : topic(nullptr, std::move(from)) {}
  inline topic& operator=(const topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic& operator=(topic&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic* internal_default_instance() {
    return reinterpret_cast<const topic*>(
        &_topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(topic& a, topic& b) { a.Swap(&b); }
  inline void Swap(topic* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic& from) { topic::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic"; }

 protected:
  explicit topic(::google::protobuf::Arena* arena);
  topic(::google::protobuf::Arena* arena, const topic& from);
  topic(::google::protobuf::Arena* arena, topic&& from) noexcept
      : topic(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // repeated .mom.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::mom::Message* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::mom::Message>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::Message>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::mom::Message>* _internal_mutable_messages();
  public:
  const ::mom::Message& messages(int index) const;
  ::mom::Message* add_messages();
  const ::google::protobuf::RepeatedPtrField<::mom::Message>& messages() const;
  // .mom.topic_config config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::mom::topic_config& config() const;
  PROTOBUF_NODISCARD ::mom::topic_config* release_config();
  ::mom::topic_config* mutable_config();
  void set_allocated_config(::mom::topic_config* value);
  void unsafe_arena_set_allocated_config(::mom::topic_config* value);
  ::mom::topic_config* unsafe_arena_release_config();

  private:
  const ::mom::topic_config& _internal_config() const;
  ::mom::topic_config* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:mom.topic)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::mom::Message > messages_;
    ::mom::topic_config* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue) */ {
 public:
  inline queue() : queue(nullptr) {}
  ~queue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue(const queue& from) : queue(nullptr, from) {}
  inline queue(queue&& from) noexcept
      : queue(nullptr, std::move(from)) {}
  inline queue& operator=(const queue& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue& operator=(queue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue* internal_default_instance() {
    return reinterpret_cast<const queue*>(
        &_queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(queue& a, queue& b) { a.Swap(&b); }
  inline void Swap(queue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue& from) { queue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue"; }

 protected:
  explicit queue(::google::protobuf::Arena* arena);
  queue(::google::protobuf::Arena* arena, const queue& from);
  queue(::google::protobuf::Arena* arena, queue&& from) noexcept
      : queue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 1,
    kConfigFieldNumber = 2,
  };
  // repeated .mom.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::mom::Message* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::mom::Message>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::Message>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::mom::Message>* _internal_mutable_messages();
  public:
  const ::mom::Message& messages(int index) const;
  ::mom::Message* add_messages();
  const ::google::protobuf::RepeatedPtrField<::mom::Message>& messages() const;
  // .mom.queue_config config = 2;
  bool has_config() const;
  void clear_config() ;
  const ::mom::queue_config& config() const;
  PROTOBUF_NODISCARD ::mom::queue_config* release_config();
  ::mom::queue_config* mutable_config();
  void set_allocated_config(::mom::queue_config* value);
  void unsafe_arena_set_allocated_config(::mom::queue_config* value);
  ::mom::queue_config* unsafe_arena_release_config();

  private:
  const ::mom::queue_config& _internal_config() const;
  ::mom::queue_config* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:mom.queue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::mom::Message > messages_;
    ::mom::queue_config* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_state final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.cluster_state) */ {
 public:
  inline cluster_state() : cluster_state(nullptr) {}
  ~cluster_state() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(cluster_state* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(cluster_state));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state(
      ::google::protobuf::internal::ConstantInitialized);

  inline cluster_state(const cluster_state& from) : cluster_state(nullptr, from) {}
  inline cluster_state(cluster_state&& from) noexcept
      : cluster_state(nullptr, std::move(from)) {}
  inline cluster_state& operator=(const cluster_state& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_state& operator=(cluster_state&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_state& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_state* internal_default_instance() {
    return reinterpret_cast<const cluster_state*>(
        &_cluster_state_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(cluster_state& a, cluster_state& b) { a.Swap(&b); }
  inline void Swap(cluster_state* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_state* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cluster_state* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<cluster_state>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const cluster_state& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const cluster_state& from) { cluster_state::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(cluster_state* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.cluster_state"; }

 protected:
  explicit cluster_state(::google::protobuf::Arena* arena);
  cluster_state(::google::protobuf::Arena* arena, const cluster_state& from);
  cluster_state(::google::protobuf::Arena* arena, cluster_state&& from) noexcept
      : cluster_state(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 2,
    kTopicAssignmentsFieldNumber = 3,
    kQueueAssignmentsFieldNumber = 4,
    kLeaderIdFieldNumber = 1,
  };
  // repeated .mom.node_info nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::mom::node_info* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* _internal_mutable_nodes();
  public:
  const ::mom::node_info& nodes(int index) const;
  ::mom::node_info* add_nodes();
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& nodes() const;
  // map<string, .mom.node_assignment> topic_assignments = 3;
  int topic_assignments_size() const;
  private:
  int _internal_topic_assignments_size() const;

  public:
  void clear_topic_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* mutable_topic_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& _internal_topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* _internal_mutable_topic_assignments();

  public:
  // map<string, .mom.node_assignment> queue_assignments = 4;
  int queue_assignments_size() const;
  private:
  int _internal_queue_assignments_size() const;

  public:
  void clear_queue_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* mutable_queue_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& _internal_queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* _internal_mutable_queue_assignments();

  public:
  // string leader_id = 1;
  void clear_leader_id() ;
  const std::string& leader_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_id(Arg_&& arg, Args_... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* value);

  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(
      const std::string& value);
  std::string* _internal_mutable_leader_id();

  public:
  // @@protoc_insertion_point(class_scope:mom.cluster_state)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 5,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const cluster_state& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::node_info > nodes_;
    ::google::protobuf::internal::MapField<cluster_state_TopicAssignmentsEntry_DoNotUse, std::string, ::mom::node_assignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        topic_assignments_;
    ::google::protobuf::internal::MapField<cluster_state_QueueAssignmentsEntry_DoNotUse, std::string, ::mom::node_assignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        queue_assignments_;
    ::google::protobuf::internal::ArenaStringPtr leader_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.cluster_info) */ {
 public:
  inline cluster_info() : cluster_info(nullptr) {}
  ~cluster_info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(cluster_info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(cluster_info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline cluster_info(const cluster_info& from) : cluster_info(nullptr, from) {}
  inline cluster_info(cluster_info&& from) noexcept
      : cluster_info(nullptr, std::move(from)) {}
  inline cluster_info& operator=(const cluster_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_info& operator=(cluster_info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_info* internal_default_instance() {
    return reinterpret_cast<const cluster_info*>(
        &_cluster_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(cluster_info& a, cluster_info& b) { a.Swap(&b); }
  inline void Swap(cluster_info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cluster_info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<cluster_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const cluster_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const cluster_info& from) { cluster_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(cluster_info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.cluster_info"; }

 protected:
  explicit cluster_info(::google::protobuf::Arena* arena);
  cluster_info(::google::protobuf::Arena* arena, const cluster_info& from);
  cluster_info(::google::protobuf::Arena* arena, cluster_info&& from) noexcept
      : cluster_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 4,
    kTopicAssignmentsFieldNumber = 5,
    kQueueAssignmentsFieldNumber = 6,
    kErrorMessageFieldNumber = 2,
    kLeaderIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .mom.node_info nodes = 4;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::mom::node_info* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* _internal_mutable_nodes();
  public:
  const ::mom::node_info& nodes(int index) const;
  ::mom::node_info* add_nodes();
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& nodes() const;
  // map<string, .mom.node_assignment> topic_assignments = 5;
  int topic_assignments_size() const;
  private:
  int _internal_topic_assignments_size() const;

  public:
  void clear_topic_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* mutable_topic_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& _internal_topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* _internal_mutable_topic_assignments();

  public:
  // map<string, .mom.node_assignment> queue_assignments = 6;
  int queue_assignments_size() const;
  private:
  int _internal_queue_assignments_size() const;

  public:
  void clear_queue_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* mutable_queue_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::node_assignment>& _internal_queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::node_assignment>* _internal_mutable_queue_assignments();

  public:
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string leader_id = 3;
  void clear_leader_id() ;
  const std::string& leader_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_id(Arg_&& arg, Args_... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* value);

  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(
      const std::string& value);
  std::string* _internal_mutable_leader_id();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.cluster_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 6, 5,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const cluster_info& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::node_info > nodes_;
    ::google::protobuf::internal::MapField<cluster_info_TopicAssignmentsEntry_DoNotUse, std::string, ::mom::node_assignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        topic_assignments_;
    ::google::protobuf::internal::MapField<cluster_info_QueueAssignmentsEntry_DoNotUse, std::string, ::mom::node_assignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        queue_assignments_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr leader_id_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class state_response final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.state_response) */ {
 public:
  inline state_response() : state_response(nullptr) {}
  ~state_response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(state_response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(state_response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR state_response(
      ::google::protobuf::internal::ConstantInitialized);

  inline state_response(const state_response& from) : state_response(nullptr, from) {}
  inline state_response(state_response&& from) noexcept
      : state_response(nullptr, std::move(from)) {}
  inline state_response& operator=(const state_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline state_response& operator=(state_response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const state_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const state_response* internal_default_instance() {
    return reinterpret_cast<const state_response*>(
        &_state_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(state_response& a, state_response& b) { a.Swap(&b); }
  inline void Swap(state_response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(state_response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  state_response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<state_response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const state_response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const state_response& from) { state_response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(state_response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.state_response"; }

 protected:
  explicit state_response(::google::protobuf::Arena* arena);
  state_response(::google::protobuf::Arena* arena, const state_response& from);
  state_response(::google::protobuf::Arena* arena, state_response&& from) noexcept
      : state_response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicsFieldNumber = 3,
    kQueuesFieldNumber = 4,
    kErrorMessageFieldNumber = 2,
    kClusterStateFieldNumber = 5,
    kSuccessFieldNumber = 1,
  };
  // repeated .mom.topic topics = 3;
  int topics_size() const;
  private:
  int _internal_topics_size() const;

  public:
  void clear_topics() ;
  ::mom::topic* mutable_topics(int index);
  ::google::protobuf::RepeatedPtrField<::mom::topic>* mutable_topics();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::topic>& _internal_topics() const;
  ::google::protobuf::RepeatedPtrField<::mom::topic>* _internal_mutable_topics();
  public:
  const ::mom::topic& topics(int index) const;
  ::mom::topic* add_topics();
  const ::google::protobuf::RepeatedPtrField<::mom::topic>& topics() const;
  // repeated .mom.queue queues = 4;
  int queues_size() const;
  private:
  int _internal_queues_size() const;

  public:
  void clear_queues() ;
  ::mom::queue* mutable_queues(int index);
  ::google::protobuf::RepeatedPtrField<::mom::queue>* mutable_queues();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& _internal_queues() const;
  ::google::protobuf::RepeatedPtrField<::mom::queue>* _internal_mutable_queues();
  public:
  const ::mom::queue& queues(int index) const;
  ::mom::queue* add_queues();
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& queues() const;
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // .mom.cluster_state cluster_state = 5;
  bool has_cluster_state() const;
  void clear_cluster_state() ;
  const ::mom::cluster_state& cluster_state() const;
  PROTOBUF_NODISCARD ::mom::cluster_state* release_cluster_state();
  ::mom::cluster_state* mutable_cluster_state();
  void set_allocated_cluster_state(::mom::cluster_state* value);
  void unsafe_arena_set_allocated_cluster_state(::mom::cluster_state* value);
  ::mom::cluster_state* unsafe_arena_release_cluster_state();

  private:
  const ::mom::cluster_state& _internal_cluster_state() const;
  ::mom::cluster_state* _internal_mutable_cluster_state();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.state_response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const state_response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::mom::topic > topics_;
    ::google::protobuf::RepeatedPtrField< ::mom::queue > queues_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::mom::cluster_state* cluster_state_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// node_ID

// string node_id = 1;
inline void node_ID::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& node_ID::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_ID.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void node_ID::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.node_ID.node_id)
}
inline std::string* node_ID::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:mom.node_ID.node_id)
  return _s;
}
inline const std::string& node_ID::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void node_ID::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* node_ID::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* node_ID::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.node_ID.node_id)
  return _impl_.node_id_.Release();
}
inline void node_ID::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.node_ID.node_id)
}

// -------------------------------------------------------------------

// status

// bool success = 1;
inline void status::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool status::success() const {
  // @@protoc_insertion_point(field_get:mom.status.success)
  return _internal_success();
}
inline void status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.status.success)
}
inline bool status::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void status::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void status::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& status::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.status.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void status::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.status.error_message)
}
inline std::string* status::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mom.status.error_message)
  return _s;
}
inline const std::string& status::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void status::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* status::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* status::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.status.error_message)
  return _impl_.error_message_.Release();
}
inline void status::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.status.error_message)
}

// -------------------------------------------------------------------

// topic_config

// string name = 1;
inline void topic_config::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& topic_config::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_config.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_config::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_config.name)
}
inline std::string* topic_config::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_config.name)
  return _s;
}
inline const std::string& topic_config::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void topic_config::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* topic_config::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* topic_config::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_config.name)
  return _impl_.name_.Release();
}
inline void topic_config::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_config.name)
}

// string owner = 2;
inline void topic_config::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& topic_config::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_config.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_config::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_config.owner)
}
inline std::string* topic_config::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic_config.owner)
  return _s;
}
inline const std::string& topic_config::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void topic_config::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* topic_config::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* topic_config::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_config.owner)
  return _impl_.owner_.Release();
}
inline void topic_config::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_config.owner)
}

// int64 creation_timestamp = 3;
inline void topic_config::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = ::int64_t{0};
}
inline ::int64_t topic_config::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:mom.topic_config.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void topic_config::set_creation_timestamp(::int64_t value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.topic_config.creation_timestamp)
}
inline ::int64_t topic_config::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_;
}
inline void topic_config::_internal_set_creation_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = value;
}

// -------------------------------------------------------------------

// queue_config

// string name = 1;
inline void queue_config::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& queue_config::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_config.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_config::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_config.name)
}
inline std::string* queue_config::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.queue_config.name)
  return _s;
}
inline const std::string& queue_config::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void queue_config::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* queue_config::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* queue_config::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_config.name)
  return _impl_.name_.Release();
}
inline void queue_config::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_config.name)
}

// string owner = 2;
inline void queue_config::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& queue_config::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_config.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_config::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_config.owner)
}
inline std::string* queue_config::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.queue_config.owner)
  return _s;
}
inline const std::string& queue_config::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void queue_config::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* queue_config::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* queue_config::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_config.owner)
  return _impl_.owner_.Release();
}
inline void queue_config::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_config.owner)
}

// int64 creation_timestamp = 3;
inline void queue_config::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = ::int64_t{0};
}
inline ::int64_t queue_config::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:mom.queue_config.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void queue_config::set_creation_timestamp(::int64_t value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.queue_config.creation_timestamp)
}
inline ::int64_t queue_config::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_;
}
inline void queue_config::_internal_set_creation_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Message

// string id = 1;
inline void Message::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Message::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.Message.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.Message.id)
}
inline std::string* Message::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:mom.Message.id)
  return _s;
}
inline const std::string& Message::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Message::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Message::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.Message.id)
  return _impl_.id_.Release();
}
inline void Message::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.Message.id)
}

// string topic_or_queue_name = 2;
inline void Message::clear_topic_or_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_or_queue_name_.ClearToEmpty();
}
inline const std::string& Message::topic_or_queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.Message.topic_or_queue_name)
  return _internal_topic_or_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_topic_or_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_or_queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.Message.topic_or_queue_name)
}
inline std::string* Message::mutable_topic_or_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_or_queue_name();
  // @@protoc_insertion_point(field_mutable:mom.Message.topic_or_queue_name)
  return _s;
}
inline const std::string& Message::_internal_topic_or_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_or_queue_name_.Get();
}
inline void Message::_internal_set_topic_or_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_or_queue_name_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_topic_or_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_or_queue_name_.Mutable( GetArena());
}
inline std::string* Message::release_topic_or_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.Message.topic_or_queue_name)
  return _impl_.topic_or_queue_name_.Release();
}
inline void Message::set_allocated_topic_or_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_or_queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_or_queue_name_.IsDefault()) {
    _impl_.topic_or_queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.Message.topic_or_queue_name)
}

// bool is_topic = 3;
inline void Message::clear_is_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_topic_ = false;
}
inline bool Message::is_topic() const {
  // @@protoc_insertion_point(field_get:mom.Message.is_topic)
  return _internal_is_topic();
}
inline void Message::set_is_topic(bool value) {
  _internal_set_is_topic(value);
  // @@protoc_insertion_point(field_set:mom.Message.is_topic)
}
inline bool Message::_internal_is_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_topic_;
}
inline void Message::_internal_set_is_topic(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_topic_ = value;
}

// string content = 4;
inline void Message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.Message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.Message.content)
}
inline std::string* Message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom.Message.content)
  return _s;
}
inline const std::string& Message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void Message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.Message.content)
  return _impl_.content_.Release();
}
inline void Message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.Message.content)
}

// string sender = 5;
inline void Message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& Message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.Message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.Message.sender)
}
inline std::string* Message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom.Message.sender)
  return _s;
}
inline const std::string& Message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void Message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* Message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.Message.sender)
  return _impl_.sender_.Release();
}
inline void Message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.Message.sender)
}

// int64 timestamp = 6;
inline void Message::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Message::timestamp() const {
  // @@protoc_insertion_point(field_get:mom.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.Message.timestamp)
}
inline ::int64_t Message::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Message::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// map<string, string> headers = 7;
inline int Message::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int Message::headers_size() const {
  return _internal_headers_size();
}
inline void Message::clear_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Message::_internal_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Message::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.Message.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* Message::_internal_mutable_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Message::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.Message.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// topic

// repeated .mom.Message messages = 1;
inline int topic::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int topic::messages_size() const {
  return _internal_messages_size();
}
inline void topic::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::mom::Message* topic::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.topic.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::Message>* topic::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.topic.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::mom::Message& topic::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic.messages)
  return _internal_messages().Get(index);
}
inline ::mom::Message* topic::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::Message* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:mom.topic.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::Message>& topic::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.topic.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::Message>&
topic::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::Message>*
topic::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// .mom.topic_config config = 2;
inline bool topic::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void topic::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mom::topic_config& topic::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mom::topic_config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mom::topic_config&>(::mom::_topic_config_default_instance_);
}
inline const ::mom::topic_config& topic::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic.config)
  return _internal_config();
}
inline void topic::unsafe_arena_set_allocated_config(::mom::topic_config* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::mom::topic_config*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mom.topic.config)
}
inline ::mom::topic_config* topic::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::topic_config* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mom::topic_config* topic::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::topic_config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::mom::topic_config* topic::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mom::topic_config>(GetArena());
    _impl_.config_ = reinterpret_cast<::mom::topic_config*>(p);
  }
  return _impl_.config_;
}
inline ::mom::topic_config* topic::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mom::topic_config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:mom.topic.config)
  return _msg;
}
inline void topic::set_allocated_config(::mom::topic_config* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::mom::topic_config*>(value);
  // @@protoc_insertion_point(field_set_allocated:mom.topic.config)
}

// -------------------------------------------------------------------

// queue

// repeated .mom.Message messages = 1;
inline int queue::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int queue::messages_size() const {
  return _internal_messages_size();
}
inline void queue::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::mom::Message* queue::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.queue.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::Message>* queue::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.queue.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::mom::Message& queue::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue.messages)
  return _internal_messages().Get(index);
}
inline ::mom::Message* queue::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::Message* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:mom.queue.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::Message>& queue::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.queue.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::Message>&
queue::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::Message>*
queue::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// .mom.queue_config config = 2;
inline bool queue::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void queue::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mom::queue_config& queue::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mom::queue_config* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::mom::queue_config&>(::mom::_queue_config_default_instance_);
}
inline const ::mom::queue_config& queue::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue.config)
  return _internal_config();
}
inline void queue::unsafe_arena_set_allocated_config(::mom::queue_config* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::mom::queue_config*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mom.queue.config)
}
inline ::mom::queue_config* queue::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::queue_config* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mom::queue_config* queue::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::queue_config* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::mom::queue_config* queue::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mom::queue_config>(GetArena());
    _impl_.config_ = reinterpret_cast<::mom::queue_config*>(p);
  }
  return _impl_.config_;
}
inline ::mom::queue_config* queue::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mom::queue_config* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:mom.queue.config)
  return _msg;
}
inline void queue::set_allocated_config(::mom::queue_config* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::mom::queue_config*>(value);
  // @@protoc_insertion_point(field_set_allocated:mom.queue.config)
}

// -------------------------------------------------------------------

// node_info

// string node_id = 1;
inline void node_info::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& node_info::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_info.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void node_info::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.node_info.node_id)
}
inline std::string* node_info::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:mom.node_info.node_id)
  return _s;
}
inline const std::string& node_info::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void node_info::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* node_info::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* node_info::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.node_info.node_id)
  return _impl_.node_id_.Release();
}
inline void node_info::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.node_info.node_id)
}

// string host = 2;
inline void node_info::clear_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.ClearToEmpty();
}
inline const std::string& node_info::host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_info.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void node_info::set_host(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.node_info.host)
}
inline std::string* node_info::mutable_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:mom.node_info.host)
  return _s;
}
inline const std::string& node_info::_internal_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.host_.Get();
}
inline void node_info::_internal_set_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.Set(value, GetArena());
}
inline std::string* node_info::_internal_mutable_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.host_.Mutable( GetArena());
}
inline std::string* node_info::release_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.node_info.host)
  return _impl_.host_.Release();
}
inline void node_info::set_allocated_host(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.node_info.host)
}

// int32 port = 3;
inline void node_info::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t node_info::port() const {
  // @@protoc_insertion_point(field_get:mom.node_info.port)
  return _internal_port();
}
inline void node_info::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:mom.node_info.port)
}
inline ::int32_t node_info::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void node_info::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// node_assignment

// string primary_node = 1;
inline void node_assignment::clear_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.ClearToEmpty();
}
inline const std::string& node_assignment::primary_node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_assignment.primary_node)
  return _internal_primary_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void node_assignment::set_primary_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.node_assignment.primary_node)
}
inline std::string* node_assignment::mutable_primary_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_node();
  // @@protoc_insertion_point(field_mutable:mom.node_assignment.primary_node)
  return _s;
}
inline const std::string& node_assignment::_internal_primary_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_node_.Get();
}
inline void node_assignment::_internal_set_primary_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.Set(value, GetArena());
}
inline std::string* node_assignment::_internal_mutable_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_node_.Mutable( GetArena());
}
inline std::string* node_assignment::release_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.node_assignment.primary_node)
  return _impl_.primary_node_.Release();
}
inline void node_assignment::set_allocated_primary_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_node_.IsDefault()) {
    _impl_.primary_node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.node_assignment.primary_node)
}

// repeated string replica_nodes = 2;
inline int node_assignment::_internal_replica_nodes_size() const {
  return _internal_replica_nodes().size();
}
inline int node_assignment::replica_nodes_size() const {
  return _internal_replica_nodes_size();
}
inline void node_assignment::clear_replica_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replica_nodes_.Clear();
}
inline std::string* node_assignment::add_replica_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_replica_nodes()->Add();
  // @@protoc_insertion_point(field_add_mutable:mom.node_assignment.replica_nodes)
  return _s;
}
inline const std::string& node_assignment::replica_nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_assignment.replica_nodes)
  return _internal_replica_nodes().Get(index);
}
inline std::string* node_assignment::mutable_replica_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.node_assignment.replica_nodes)
  return _internal_mutable_replica_nodes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void node_assignment::set_replica_nodes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_replica_nodes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:mom.node_assignment.replica_nodes)
}
template <typename Arg_, typename... Args_>
inline void node_assignment::add_replica_nodes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_replica_nodes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:mom.node_assignment.replica_nodes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
node_assignment::replica_nodes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.node_assignment.replica_nodes)
  return _internal_replica_nodes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
node_assignment::mutable_replica_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.node_assignment.replica_nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_replica_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
node_assignment::_internal_replica_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replica_nodes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
node_assignment::_internal_mutable_replica_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.replica_nodes_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// cluster_state

// string leader_id = 1;
inline void cluster_state::clear_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& cluster_state::leader_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_state.leader_id)
  return _internal_leader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void cluster_state::set_leader_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.cluster_state.leader_id)
}
inline std::string* cluster_state::mutable_leader_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:mom.cluster_state.leader_id)
  return _s;
}
inline const std::string& cluster_state::_internal_leader_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_id_.Get();
}
inline void cluster_state::_internal_set_leader_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(value, GetArena());
}
inline std::string* cluster_state::_internal_mutable_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_id_.Mutable( GetArena());
}
inline std::string* cluster_state::release_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.cluster_state.leader_id)
  return _impl_.leader_id_.Release();
}
inline void cluster_state::set_allocated_leader_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.cluster_state.leader_id)
}

// repeated .mom.node_info nodes = 2;
inline int cluster_state::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int cluster_state::nodes_size() const {
  return _internal_nodes_size();
}
inline void cluster_state::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline ::mom::node_info* cluster_state::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.cluster_state.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>* cluster_state::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.cluster_state.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::mom::node_info& cluster_state::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_state.nodes)
  return _internal_nodes().Get(index);
}
inline ::mom::node_info* cluster_state::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::node_info* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:mom.cluster_state.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>& cluster_state::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.cluster_state.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>&
cluster_state::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>*
cluster_state::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

// map<string, .mom.node_assignment> topic_assignments = 3;
inline int cluster_state::_internal_topic_assignments_size() const {
  return _internal_topic_assignments().size();
}
inline int cluster_state::topic_assignments_size() const {
  return _internal_topic_assignments_size();
}
inline void cluster_state::clear_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_state::_internal_topic_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_state::topic_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_state.topic_assignments)
  return _internal_topic_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_state::_internal_mutable_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_state::mutable_topic_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_state.topic_assignments)
  return _internal_mutable_topic_assignments();
}

// map<string, .mom.node_assignment> queue_assignments = 4;
inline int cluster_state::_internal_queue_assignments_size() const {
  return _internal_queue_assignments().size();
}
inline int cluster_state::queue_assignments_size() const {
  return _internal_queue_assignments_size();
}
inline void cluster_state::clear_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_state::_internal_queue_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_state::queue_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_state.queue_assignments)
  return _internal_queue_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_state::_internal_mutable_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_state::mutable_queue_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_state.queue_assignments)
  return _internal_mutable_queue_assignments();
}

// -------------------------------------------------------------------

// state_response

// bool success = 1;
inline void state_response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool state_response::success() const {
  // @@protoc_insertion_point(field_get:mom.state_response.success)
  return _internal_success();
}
inline void state_response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.state_response.success)
}
inline bool state_response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void state_response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void state_response::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& state_response::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.state_response.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void state_response::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.state_response.error_message)
}
inline std::string* state_response::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mom.state_response.error_message)
  return _s;
}
inline const std::string& state_response::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void state_response::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* state_response::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* state_response::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.state_response.error_message)
  return _impl_.error_message_.Release();
}
inline void state_response::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.state_response.error_message)
}

// repeated .mom.topic topics = 3;
inline int state_response::_internal_topics_size() const {
  return _internal_topics().size();
}
inline int state_response::topics_size() const {
  return _internal_topics_size();
}
inline void state_response::clear_topics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topics_.Clear();
}
inline ::mom::topic* state_response::mutable_topics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.state_response.topics)
  return _internal_mutable_topics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::topic>* state_response::mutable_topics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.state_response.topics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_topics();
}
inline const ::mom::topic& state_response::topics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.state_response.topics)
  return _internal_topics().Get(index);
}
inline ::mom::topic* state_response::add_topics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::topic* _add = _internal_mutable_topics()->Add();
  // @@protoc_insertion_point(field_add:mom.state_response.topics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::topic>& state_response::topics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.state_response.topics)
  return _internal_topics();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::topic>&
state_response::_internal_topics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topics_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::topic>*
state_response::_internal_mutable_topics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.topics_;
}

// repeated .mom.queue queues = 4;
inline int state_response::_internal_queues_size() const {
  return _internal_queues().size();
}
inline int state_response::queues_size() const {
  return _internal_queues_size();
}
inline void state_response::clear_queues() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queues_.Clear();
}
inline ::mom::queue* state_response::mutable_queues(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.state_response.queues)
  return _internal_mutable_queues()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>* state_response::mutable_queues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.state_response.queues)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_queues();
}
inline const ::mom::queue& state_response::queues(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.state_response.queues)
  return _internal_queues().Get(index);
}
inline ::mom::queue* state_response::add_queues() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::queue* _add = _internal_mutable_queues()->Add();
  // @@protoc_insertion_point(field_add:mom.state_response.queues)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>& state_response::queues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.state_response.queues)
  return _internal_queues();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>&
state_response::_internal_queues() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queues_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>*
state_response::_internal_mutable_queues() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.queues_;
}

// .mom.cluster_state cluster_state = 5;
inline bool state_response::has_cluster_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cluster_state_ != nullptr);
  return value;
}
inline void state_response::clear_cluster_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cluster_state_ != nullptr) _impl_.cluster_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mom::cluster_state& state_response::_internal_cluster_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mom::cluster_state* p = _impl_.cluster_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::mom::cluster_state&>(::mom::_cluster_state_default_instance_);
}
inline const ::mom::cluster_state& state_response::cluster_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.state_response.cluster_state)
  return _internal_cluster_state();
}
inline void state_response::unsafe_arena_set_allocated_cluster_state(::mom::cluster_state* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cluster_state_);
  }
  _impl_.cluster_state_ = reinterpret_cast<::mom::cluster_state*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mom.state_response.cluster_state)
}
inline ::mom::cluster_state* state_response::release_cluster_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::cluster_state* released = _impl_.cluster_state_;
  _impl_.cluster_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mom::cluster_state* state_response::unsafe_arena_release_cluster_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.state_response.cluster_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::cluster_state* temp = _impl_.cluster_state_;
  _impl_.cluster_state_ = nullptr;
  return temp;
}
inline ::mom::cluster_state* state_response::_internal_mutable_cluster_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cluster_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mom::cluster_state>(GetArena());
    _impl_.cluster_state_ = reinterpret_cast<::mom::cluster_state*>(p);
  }
  return _impl_.cluster_state_;
}
inline ::mom::cluster_state* state_response::mutable_cluster_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mom::cluster_state* _msg = _internal_mutable_cluster_state();
  // @@protoc_insertion_point(field_mutable:mom.state_response.cluster_state)
  return _msg;
}
inline void state_response::set_allocated_cluster_state(::mom::cluster_state* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cluster_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cluster_state_ = reinterpret_cast<::mom::cluster_state*>(value);
  // @@protoc_insertion_point(field_set_allocated:mom.state_response.cluster_state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// cluster_info

// bool success = 1;
inline void cluster_info::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool cluster_info::success() const {
  // @@protoc_insertion_point(field_get:mom.cluster_info.success)
  return _internal_success();
}
inline void cluster_info::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.cluster_info.success)
}
inline bool cluster_info::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void cluster_info::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void cluster_info::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& cluster_info::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_info.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void cluster_info::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.cluster_info.error_message)
}
inline std::string* cluster_info::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mom.cluster_info.error_message)
  return _s;
}
inline const std::string& cluster_info::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void cluster_info::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* cluster_info::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* cluster_info::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.cluster_info.error_message)
  return _impl_.error_message_.Release();
}
inline void cluster_info::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.cluster_info.error_message)
}

// string leader_id = 3;
inline void cluster_info::clear_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& cluster_info::leader_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_info.leader_id)
  return _internal_leader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void cluster_info::set_leader_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.cluster_info.leader_id)
}
inline std::string* cluster_info::mutable_leader_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:mom.cluster_info.leader_id)
  return _s;
}
inline const std::string& cluster_info::_internal_leader_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_id_.Get();
}
inline void cluster_info::_internal_set_leader_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(value, GetArena());
}
inline std::string* cluster_info::_internal_mutable_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_id_.Mutable( GetArena());
}
inline std::string* cluster_info::release_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.cluster_info.leader_id)
  return _impl_.leader_id_.Release();
}
inline void cluster_info::set_allocated_leader_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.cluster_info.leader_id)
}

// repeated .mom.node_info nodes = 4;
inline int cluster_info::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int cluster_info::nodes_size() const {
  return _internal_nodes_size();
}
inline void cluster_info::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline ::mom::node_info* cluster_info::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.cluster_info.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>* cluster_info::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.cluster_info.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::mom::node_info& cluster_info::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_info.nodes)
  return _internal_nodes().Get(index);
}
inline ::mom::node_info* cluster_info::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::node_info* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:mom.cluster_info.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>& cluster_info::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.cluster_info.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>&
cluster_info::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>*
cluster_info::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

// map<string, .mom.node_assignment> topic_assignments = 5;
inline int cluster_info::_internal_topic_assignments_size() const {
  return _internal_topic_assignments().size();
}
inline int cluster_info::topic_assignments_size() const {
  return _internal_topic_assignments_size();
}
inline void cluster_info::clear_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_info::_internal_topic_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_info::topic_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_info.topic_assignments)
  return _internal_topic_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_info::_internal_mutable_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_info::mutable_topic_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_info.topic_assignments)
  return _internal_mutable_topic_assignments();
}

// map<string, .mom.node_assignment> queue_assignments = 6;
inline int cluster_info::_internal_queue_assignments_size() const {
  return _internal_queue_assignments().size();
}
inline int cluster_info::queue_assignments_size() const {
  return _internal_queue_assignments_size();
}
inline void cluster_info::clear_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_info::_internal_queue_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::node_assignment>& cluster_info::queue_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_info.queue_assignments)
  return _internal_queue_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_info::_internal_mutable_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::node_assignment>* cluster_info::mutable_queue_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_info.queue_assignments)
  return _internal_mutable_queue_assignments();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// topic_message

// string topic_name = 1;
inline void topic_message::clear_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& topic_message::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_message.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_message::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_message.topic_name)
}
inline std::string* topic_message::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_message.topic_name)
  return _s;
}
inline const std::string& topic_message::_internal_topic_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_name_.Get();
}
inline void topic_message::_internal_set_topic_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* topic_message::_internal_mutable_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* topic_message::release_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_message.topic_name)
  return _impl_.topic_name_.Release();
}
inline void topic_message::set_allocated_topic_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_message.topic_name)
}

// string content = 2;
inline void topic_message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& topic_message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_message.content)
}
inline std::string* topic_message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom.topic_message.content)
  return _s;
}
inline const std::string& topic_message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void topic_message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* topic_message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* topic_message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_message.content)
  return _impl_.content_.Release();
}
inline void topic_message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_message.content)
}

// string sender = 3;
inline void topic_message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& topic_message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_message.sender)
}
inline std::string* topic_message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom.topic_message.sender)
  return _s;
}
inline const std::string& topic_message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void topic_message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* topic_message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* topic_message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_message.sender)
  return _impl_.sender_.Release();
}
inline void topic_message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_message.sender)
}

// map<string, string> headers = 4;
inline int topic_message::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int topic_message::headers_size() const {
  return _internal_headers_size();
}
inline void topic_message::clear_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& topic_message::_internal_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& topic_message::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.topic_message.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* topic_message::_internal_mutable_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* topic_message::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.topic_message.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// queue_message

// string queue_name = 1;
inline void queue_message::clear_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& queue_message::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_message.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_message::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_message.queue_name)
}
inline std::string* queue_message::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:mom.queue_message.queue_name)
  return _s;
}
inline const std::string& queue_message::_internal_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_name_.Get();
}
inline void queue_message::_internal_set_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* queue_message::_internal_mutable_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* queue_message::release_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_message.queue_name)
  return _impl_.queue_name_.Release();
}
inline void queue_message::set_allocated_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.queue_name_.IsDefault()) {
    _impl_.queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_message.queue_name)
}

// string content = 2;
inline void queue_message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& queue_message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_message.content)
}
inline std::string* queue_message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom.queue_message.content)
  return _s;
}
inline const std::string& queue_message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void queue_message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* queue_message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* queue_message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_message.content)
  return _impl_.content_.Release();
}
inline void queue_message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_message.content)
}

// string sender = 3;
inline void queue_message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& queue_message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_message.sender)
}
inline std::string* queue_message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom.queue_message.sender)
  return _s;
}
inline const std::string& queue_message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void queue_message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* queue_message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* queue_message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_message.sender)
  return _impl_.sender_.Release();
}
inline void queue_message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_message.sender)
}

// map<string, string> headers = 4;
inline int queue_message::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int queue_message::headers_size() const {
  return _internal_headers_size();
}
inline void queue_message::clear_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& queue_message::_internal_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& queue_message::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.queue_message.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* queue_message::_internal_mutable_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* queue_message::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.queue_message.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// message_status

// bool success = 1;
inline void message_status::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool message_status::success() const {
  // @@protoc_insertion_point(field_get:mom.message_status.success)
  return _internal_success();
}
inline void message_status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.message_status.success)
}
inline bool message_status::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void message_status::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string error_message = 2;
inline void message_status::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& message_status::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.message_status.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message_status::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.message_status.error_message)
}
inline std::string* message_status::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mom.message_status.error_message)
  return _s;
}
inline const std::string& message_status::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void message_status::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* message_status::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* message_status::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.message_status.error_message)
  return _impl_.error_message_.Release();
}
inline void message_status::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.message_status.error_message)
}

// -------------------------------------------------------------------

// topic_id

// string topic_name = 1;
inline void topic_id::clear_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& topic_id::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_id.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_id::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_id.topic_name)
}
inline std::string* topic_id::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_id.topic_name)
  return _s;
}
inline const std::string& topic_id::_internal_topic_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_name_.Get();
}
inline void topic_id::_internal_set_topic_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* topic_id::_internal_mutable_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* topic_id::release_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_id.topic_name)
  return _impl_.topic_name_.Release();
}
inline void topic_id::set_allocated_topic_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_id.topic_name)
}

// -------------------------------------------------------------------

// queue_id

// string queue_name = 1;
inline void queue_id::clear_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& queue_id::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_id.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_id::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_id.queue_name)
}
inline std::string* queue_id::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:mom.queue_id.queue_name)
  return _s;
}
inline const std::string& queue_id::_internal_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_name_.Get();
}
inline void queue_id::_internal_set_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* queue_id::_internal_mutable_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* queue_id::release_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_id.queue_name)
  return _impl_.queue_name_.Release();
}
inline void queue_id::set_allocated_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.queue_name_.IsDefault()) {
    _impl_.queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_id.queue_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mom


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mom_2eproto_2epb_2eh
