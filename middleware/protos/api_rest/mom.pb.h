// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mom.proto
// Protobuf C++ Version: 5.29.0

#ifndef mom_2eproto_2epb_2eh
#define mom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mom_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mom_2eproto;
namespace mom {
class NodeAssignment;
struct NodeAssignmentDefaultTypeInternal;
extern NodeAssignmentDefaultTypeInternal _NodeAssignment_default_instance_;
class NodeID;
struct NodeIDDefaultTypeInternal;
extern NodeIDDefaultTypeInternal _NodeID_default_instance_;
class cluster_info;
struct cluster_infoDefaultTypeInternal;
extern cluster_infoDefaultTypeInternal _cluster_info_default_instance_;
class cluster_state;
struct cluster_stateDefaultTypeInternal;
extern cluster_stateDefaultTypeInternal _cluster_state_default_instance_;
class cluster_state_QueueAssignmentsEntry_DoNotUse;
struct cluster_state_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_state_QueueAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_state_QueueAssignmentsEntry_DoNotUse_default_instance_;
class cluster_state_TopicAssignmentsEntry_DoNotUse;
struct cluster_state_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern cluster_state_TopicAssignmentsEntry_DoNotUseDefaultTypeInternal _cluster_state_TopicAssignmentsEntry_DoNotUse_default_instance_;
class message_identifier;
struct message_identifierDefaultTypeInternal;
extern message_identifierDefaultTypeInternal _message_identifier_default_instance_;
class message_status;
struct message_statusDefaultTypeInternal;
extern message_statusDefaultTypeInternal _message_status_default_instance_;
class node_info;
struct node_infoDefaultTypeInternal;
extern node_infoDefaultTypeInternal _node_info_default_instance_;
class node_status;
struct node_statusDefaultTypeInternal;
extern node_statusDefaultTypeInternal _node_status_default_instance_;
class queue;
struct queueDefaultTypeInternal;
extern queueDefaultTypeInternal _queue_default_instance_;
class queue_config;
struct queue_configDefaultTypeInternal;
extern queue_configDefaultTypeInternal _queue_config_default_instance_;
class queue_identifier;
struct queue_identifierDefaultTypeInternal;
extern queue_identifierDefaultTypeInternal _queue_identifier_default_instance_;
class queues_response;
struct queues_responseDefaultTypeInternal;
extern queues_responseDefaultTypeInternal _queues_response_default_instance_;
class status;
struct statusDefaultTypeInternal;
extern statusDefaultTypeInternal _status_default_instance_;
class structure_message;
struct structure_messageDefaultTypeInternal;
extern structure_messageDefaultTypeInternal _structure_message_default_instance_;
class topic;
struct topicDefaultTypeInternal;
extern topicDefaultTypeInternal _topic_default_instance_;
class topic_config;
struct topic_configDefaultTypeInternal;
extern topic_configDefaultTypeInternal _topic_config_default_instance_;
class topic_identifier;
struct topic_identifierDefaultTypeInternal;
extern topic_identifierDefaultTypeInternal _topic_identifier_default_instance_;
class topic_subscription;
struct topic_subscriptionDefaultTypeInternal;
extern topic_subscriptionDefaultTypeInternal _topic_subscription_default_instance_;
class topics_response;
struct topics_responseDefaultTypeInternal;
extern topics_responseDefaultTypeInternal _topics_response_default_instance_;
}  // namespace mom
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mom {

// ===================================================================


// -------------------------------------------------------------------

class topic_subscription final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_subscription) */ {
 public:
  inline topic_subscription() : topic_subscription(nullptr) {}
  ~topic_subscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_subscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_subscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_subscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_subscription(const topic_subscription& from) : topic_subscription(nullptr, from) {}
  inline topic_subscription(topic_subscription&& from) noexcept
      : topic_subscription(nullptr, std::move(from)) {}
  inline topic_subscription& operator=(const topic_subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_subscription& operator=(topic_subscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_subscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_subscription* internal_default_instance() {
    return reinterpret_cast<const topic_subscription*>(
        &_topic_subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(topic_subscription& a, topic_subscription& b) { a.Swap(&b); }
  inline void Swap(topic_subscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_subscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_subscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_subscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_subscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_subscription& from) { topic_subscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_subscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_subscription"; }

 protected:
  explicit topic_subscription(::google::protobuf::Arena* arena);
  topic_subscription(::google::protobuf::Arena* arena, const topic_subscription& from);
  topic_subscription(::google::protobuf::Arena* arena, topic_subscription&& from) noexcept
      : topic_subscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicNameFieldNumber = 1,
    kTopicOwnerFieldNumber = 2,
    kSubscriberQueueNameFieldNumber = 3,
    kSubscriberQueueOwnerFieldNumber = 4,
    kDurableFieldNumber = 5,
  };
  // string topic_name = 1;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string topic_owner = 2;
  void clear_topic_owner() ;
  const std::string& topic_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_owner(Arg_&& arg, Args_... args);
  std::string* mutable_topic_owner();
  PROTOBUF_NODISCARD std::string* release_topic_owner();
  void set_allocated_topic_owner(std::string* value);

  private:
  const std::string& _internal_topic_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_owner(
      const std::string& value);
  std::string* _internal_mutable_topic_owner();

  public:
  // string subscriber_queue_name = 3;
  void clear_subscriber_queue_name() ;
  const std::string& subscriber_queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_queue_name();
  PROTOBUF_NODISCARD std::string* release_subscriber_queue_name();
  void set_allocated_subscriber_queue_name(std::string* value);

  private:
  const std::string& _internal_subscriber_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_queue_name(
      const std::string& value);
  std::string* _internal_mutable_subscriber_queue_name();

  public:
  // string subscriber_queue_owner = 4;
  void clear_subscriber_queue_owner() ;
  const std::string& subscriber_queue_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_queue_owner(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_queue_owner();
  PROTOBUF_NODISCARD std::string* release_subscriber_queue_owner();
  void set_allocated_subscriber_queue_owner(std::string* value);

  private:
  const std::string& _internal_subscriber_queue_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_queue_owner(
      const std::string& value);
  std::string* _internal_mutable_subscriber_queue_owner();

  public:
  // bool durable = 5;
  void clear_durable() ;
  bool durable() const;
  void set_durable(bool value);

  private:
  bool _internal_durable() const;
  void _internal_set_durable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_subscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      95, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_subscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_owner_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_queue_name_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_queue_owner_;
    bool durable_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class topic_identifier final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_identifier) */ {
 public:
  inline topic_identifier() : topic_identifier(nullptr) {}
  ~topic_identifier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_identifier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_identifier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_identifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_identifier(const topic_identifier& from) : topic_identifier(nullptr, from) {}
  inline topic_identifier(topic_identifier&& from) noexcept
      : topic_identifier(nullptr, std::move(from)) {}
  inline topic_identifier& operator=(const topic_identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_identifier& operator=(topic_identifier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_identifier* internal_default_instance() {
    return reinterpret_cast<const topic_identifier*>(
        &_topic_identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(topic_identifier& a, topic_identifier& b) { a.Swap(&b); }
  inline void Swap(topic_identifier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_identifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_identifier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_identifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_identifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_identifier& from) { topic_identifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_identifier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_identifier"; }

 protected:
  explicit topic_identifier(::google::protobuf::Arena* arena);
  topic_identifier(::google::protobuf::Arena* arena, const topic_identifier& from);
  topic_identifier(::google::protobuf::Arena* arena, topic_identifier&& from) noexcept
      : topic_identifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_identifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_identifier& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class topic_config final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic_config) */ {
 public:
  inline topic_config() : topic_config(nullptr) {}
  ~topic_config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_config* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_config(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_config(const topic_config& from) : topic_config(nullptr, from) {}
  inline topic_config(topic_config&& from) noexcept
      : topic_config(nullptr, std::move(from)) {}
  inline topic_config& operator=(const topic_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_config& operator=(topic_config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_config& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_config* internal_default_instance() {
    return reinterpret_cast<const topic_config*>(
        &_topic_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(topic_config& a, topic_config& b) { a.Swap(&b); }
  inline void Swap(topic_config* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_config* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_config& from) { topic_config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_config* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic_config"; }

 protected:
  explicit topic_config(::google::protobuf::Arena* arena);
  topic_config(::google::protobuf::Arena* arena, const topic_config& from);
  topic_config(::google::protobuf::Arena* arena, topic_config&& from) noexcept
      : topic_config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:mom.topic_config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_config& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class structure_message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.structure_message) */ {
 public:
  inline structure_message() : structure_message(nullptr) {}
  ~structure_message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(structure_message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(structure_message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR structure_message(
      ::google::protobuf::internal::ConstantInitialized);

  inline structure_message(const structure_message& from) : structure_message(nullptr, from) {}
  inline structure_message(structure_message&& from) noexcept
      : structure_message(nullptr, std::move(from)) {}
  inline structure_message& operator=(const structure_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline structure_message& operator=(structure_message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const structure_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const structure_message* internal_default_instance() {
    return reinterpret_cast<const structure_message*>(
        &_structure_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(structure_message& a, structure_message& b) { a.Swap(&b); }
  inline void Swap(structure_message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(structure_message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  structure_message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<structure_message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const structure_message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const structure_message& from) { structure_message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(structure_message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.structure_message"; }

 protected:
  explicit structure_message(::google::protobuf::Arena* arena);
  structure_message(::google::protobuf::Arena* arena, const structure_message& from);
  structure_message(::google::protobuf::Arena* arena, structure_message&& from) noexcept
      : structure_message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStructureNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kPersistentFieldNumber = 5,
  };
  // string structure_name = 1;
  void clear_structure_name() ;
  const std::string& structure_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_structure_name(Arg_&& arg, Args_... args);
  std::string* mutable_structure_name();
  PROTOBUF_NODISCARD std::string* release_structure_name();
  void set_allocated_structure_name(std::string* value);

  private:
  const std::string& _internal_structure_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_structure_name(
      const std::string& value);
  std::string* _internal_mutable_structure_name();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 3;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // int64 timestamp = 4;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool persistent = 5;
  void clear_persistent() ;
  bool persistent() const;
  void set_persistent(bool value);

  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.structure_message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const structure_message& from_msg);
    ::google::protobuf::internal::ArenaStringPtr structure_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::int64_t timestamp_;
    bool persistent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.status) */ {
 public:
  inline status() : status(nullptr) {}
  ~status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR status(
      ::google::protobuf::internal::ConstantInitialized);

  inline status(const status& from) : status(nullptr, from) {}
  inline status(status&& from) noexcept
      : status(nullptr, std::move(from)) {}
  inline status& operator=(const status& from) {
    CopyFrom(from);
    return *this;
  }
  inline status& operator=(status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const status& default_instance() {
    return *internal_default_instance();
  }
  static inline const status* internal_default_instance() {
    return reinterpret_cast<const status*>(
        &_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(status& a, status& b) { a.Swap(&b); }
  inline void Swap(status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const status& from) { status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.status"; }

 protected:
  explicit status(::google::protobuf::Arena* arena);
  status(::google::protobuf::Arena* arena, const status& from);
  status(::google::protobuf::Arena* arena, status&& from) noexcept
      : status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue_identifier final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue_identifier) */ {
 public:
  inline queue_identifier() : queue_identifier(nullptr) {}
  ~queue_identifier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_identifier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_identifier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_identifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_identifier(const queue_identifier& from) : queue_identifier(nullptr, from) {}
  inline queue_identifier(queue_identifier&& from) noexcept
      : queue_identifier(nullptr, std::move(from)) {}
  inline queue_identifier& operator=(const queue_identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_identifier& operator=(queue_identifier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_identifier* internal_default_instance() {
    return reinterpret_cast<const queue_identifier*>(
        &_queue_identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(queue_identifier& a, queue_identifier& b) { a.Swap(&b); }
  inline void Swap(queue_identifier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_identifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_identifier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_identifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_identifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_identifier& from) { queue_identifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_identifier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue_identifier"; }

 protected:
  explicit queue_identifier(::google::protobuf::Arena* arena);
  queue_identifier(::google::protobuf::Arena* arena, const queue_identifier& from);
  queue_identifier(::google::protobuf::Arena* arena, queue_identifier&& from) noexcept
      : queue_identifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:mom.queue_identifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_identifier& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue_config final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue_config) */ {
 public:
  inline queue_config() : queue_config(nullptr) {}
  ~queue_config() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_config* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_config));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_config(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_config(const queue_config& from) : queue_config(nullptr, from) {}
  inline queue_config(queue_config&& from) noexcept
      : queue_config(nullptr, std::move(from)) {}
  inline queue_config& operator=(const queue_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_config& operator=(queue_config&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_config& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_config* internal_default_instance() {
    return reinterpret_cast<const queue_config*>(
        &_queue_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(queue_config& a, queue_config& b) { a.Swap(&b); }
  inline void Swap(queue_config* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_config* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_config* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_config>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_config& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_config& from) { queue_config::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_config* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue_config"; }

 protected:
  explicit queue_config(::google::protobuf::Arena* arena);
  queue_config(::google::protobuf::Arena* arena, const queue_config& from);
  queue_config(::google::protobuf::Arena* arena, queue_config&& from) noexcept
      : queue_config(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:mom.queue_config)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_config& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class node_status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.node_status) */ {
 public:
  inline node_status() : node_status(nullptr) {}
  ~node_status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_status(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_status(const node_status& from) : node_status(nullptr, from) {}
  inline node_status(node_status&& from) noexcept
      : node_status(nullptr, std::move(from)) {}
  inline node_status& operator=(const node_status& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_status& operator=(node_status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_status& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_status* internal_default_instance() {
    return reinterpret_cast<const node_status*>(
        &_node_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(node_status& a, node_status& b) { a.Swap(&b); }
  inline void Swap(node_status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_status& from) { node_status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.node_status"; }

 protected:
  explicit node_status(::google::protobuf::Arena* arena);
  node_status(::google::protobuf::Arena* arena, const node_status& from);
  node_status(::google::protobuf::Arena* arena, node_status&& from) noexcept
      : node_status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActiveFieldNumber = 1,
  };
  // bool active = 1;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.node_status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_status& from_msg);
    bool active_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class node_info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.node_info) */ {
 public:
  inline node_info() : node_info(nullptr) {}
  ~node_info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_info(const node_info& from) : node_info(nullptr, from) {}
  inline node_info(node_info&& from) noexcept
      : node_info(nullptr, std::move(from)) {}
  inline node_info& operator=(const node_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_info& operator=(node_info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_info* internal_default_instance() {
    return reinterpret_cast<const node_info*>(
        &_node_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(node_info& a, node_info& b) { a.Swap(&b); }
  inline void Swap(node_info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_info& from) { node_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.node_info"; }

 protected:
  explicit node_info(::google::protobuf::Arena* arena);
  node_info(::google::protobuf::Arena* arena, const node_info& from);
  node_info(::google::protobuf::Arena* arena, node_info&& from) noexcept
      : node_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kNodeIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kLeaderFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // int32 node_id = 1;
  void clear_node_id() ;
  ::int32_t node_id() const;
  void set_node_id(::int32_t value);

  private:
  ::int32_t _internal_node_id() const;
  void _internal_set_node_id(::int32_t value);

  public:
  // int32 port = 3;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // bool leader = 4;
  void clear_leader() ;
  bool leader() const;
  void set_leader(bool value);

  private:
  bool _internal_leader() const;
  void _internal_set_leader(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.node_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      24, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_info& from_msg);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::int32_t node_id_;
    ::int32_t port_;
    bool leader_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class message_status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.message_status) */ {
 public:
  inline message_status() : message_status(nullptr) {}
  ~message_status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(message_status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(message_status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR message_status(
      ::google::protobuf::internal::ConstantInitialized);

  inline message_status(const message_status& from) : message_status(nullptr, from) {}
  inline message_status(message_status&& from) noexcept
      : message_status(nullptr, std::move(from)) {}
  inline message_status& operator=(const message_status& from) {
    CopyFrom(from);
    return *this;
  }
  inline message_status& operator=(message_status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const message_status& default_instance() {
    return *internal_default_instance();
  }
  static inline const message_status* internal_default_instance() {
    return reinterpret_cast<const message_status*>(
        &_message_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(message_status& a, message_status& b) { a.Swap(&b); }
  inline void Swap(message_status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message_status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  message_status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<message_status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const message_status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const message_status& from) { message_status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(message_status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.message_status"; }

 protected:
  explicit message_status(::google::protobuf::Arena* arena);
  message_status(::google::protobuf::Arena* arena, const message_status& from);
  message_status(::google::protobuf::Arena* arena, message_status&& from) noexcept
      : message_status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.message_status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const message_status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class message_identifier final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.message_identifier) */ {
 public:
  inline message_identifier() : message_identifier(nullptr) {}
  ~message_identifier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(message_identifier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(message_identifier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR message_identifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline message_identifier(const message_identifier& from) : message_identifier(nullptr, from) {}
  inline message_identifier(message_identifier&& from) noexcept
      : message_identifier(nullptr, std::move(from)) {}
  inline message_identifier& operator=(const message_identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline message_identifier& operator=(message_identifier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const message_identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const message_identifier* internal_default_instance() {
    return reinterpret_cast<const message_identifier*>(
        &_message_identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(message_identifier& a, message_identifier& b) { a.Swap(&b); }
  inline void Swap(message_identifier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message_identifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  message_identifier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<message_identifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const message_identifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const message_identifier& from) { message_identifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(message_identifier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.message_identifier"; }

 protected:
  explicit message_identifier(::google::protobuf::Arena* arena);
  message_identifier(::google::protobuf::Arena* arena, const message_identifier& from);
  message_identifier(::google::protobuf::Arena* arena, message_identifier&& from) noexcept
      : message_identifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kDestinationNameFieldNumber = 2,
    kIsTopicFieldNumber = 3,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string destination_name = 2;
  void clear_destination_name() ;
  const std::string& destination_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_name(Arg_&& arg, Args_... args);
  std::string* mutable_destination_name();
  PROTOBUF_NODISCARD std::string* release_destination_name();
  void set_allocated_destination_name(std::string* value);

  private:
  const std::string& _internal_destination_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_name(
      const std::string& value);
  std::string* _internal_mutable_destination_name();

  public:
  // bool is_topic = 3;
  void clear_is_topic() ;
  bool is_topic() const;
  void set_is_topic(bool value);

  private:
  bool _internal_is_topic() const;
  void _internal_set_is_topic(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.message_identifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const message_identifier& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr destination_name_;
    bool is_topic_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_info final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.cluster_info) */ {
 public:
  inline cluster_info() : cluster_info(nullptr) {}
  ~cluster_info() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(cluster_info* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(cluster_info));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_info(
      ::google::protobuf::internal::ConstantInitialized);

  inline cluster_info(const cluster_info& from) : cluster_info(nullptr, from) {}
  inline cluster_info(cluster_info&& from) noexcept
      : cluster_info(nullptr, std::move(from)) {}
  inline cluster_info& operator=(const cluster_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_info& operator=(cluster_info&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_info* internal_default_instance() {
    return reinterpret_cast<const cluster_info*>(
        &_cluster_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(cluster_info& a, cluster_info& b) { a.Swap(&b); }
  inline void Swap(cluster_info* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cluster_info* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<cluster_info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const cluster_info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const cluster_info& from) { cluster_info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(cluster_info* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.cluster_info"; }

 protected:
  explicit cluster_info(::google::protobuf::Arena* arena);
  cluster_info(::google::protobuf::Arena* arena, const cluster_info& from);
  cluster_info(::google::protobuf::Arena* arena, cluster_info&& from) noexcept
      : cluster_info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.cluster_info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const cluster_info& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class NodeID final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.NodeID) */ {
 public:
  inline NodeID() : NodeID(nullptr) {}
  ~NodeID() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeID* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeID));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeID(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeID(const NodeID& from) : NodeID(nullptr, from) {}
  inline NodeID(NodeID&& from) noexcept
      : NodeID(nullptr, std::move(from)) {}
  inline NodeID& operator=(const NodeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeID& operator=(NodeID&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeID& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeID* internal_default_instance() {
    return reinterpret_cast<const NodeID*>(
        &_NodeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(NodeID& a, NodeID& b) { a.Swap(&b); }
  inline void Swap(NodeID* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeID* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeID& from) { NodeID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeID* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.NodeID"; }

 protected:
  explicit NodeID(::google::protobuf::Arena* arena);
  NodeID(::google::protobuf::Arena* arena, const NodeID& from);
  NodeID(::google::protobuf::Arena* arena, NodeID&& from) noexcept
      : NodeID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* value);

  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(
      const std::string& value);
  std::string* _internal_mutable_node_id();

  public:
  // @@protoc_insertion_point(class_scope:mom.NodeID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      26, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeID& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class NodeAssignment final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.NodeAssignment) */ {
 public:
  inline NodeAssignment() : NodeAssignment(nullptr) {}
  ~NodeAssignment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NodeAssignment* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NodeAssignment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeAssignment(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeAssignment(const NodeAssignment& from) : NodeAssignment(nullptr, from) {}
  inline NodeAssignment(NodeAssignment&& from) noexcept
      : NodeAssignment(nullptr, std::move(from)) {}
  inline NodeAssignment& operator=(const NodeAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeAssignment& operator=(NodeAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeAssignment* internal_default_instance() {
    return reinterpret_cast<const NodeAssignment*>(
        &_NodeAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(NodeAssignment& a, NodeAssignment& b) { a.Swap(&b); }
  inline void Swap(NodeAssignment* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeAssignment* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NodeAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeAssignment& from) { NodeAssignment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NodeAssignment* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.NodeAssignment"; }

 protected:
  explicit NodeAssignment(::google::protobuf::Arena* arena);
  NodeAssignment(::google::protobuf::Arena* arena, const NodeAssignment& from);
  NodeAssignment(::google::protobuf::Arena* arena, NodeAssignment&& from) noexcept
      : NodeAssignment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReplicaNodesFieldNumber = 2,
    kPrimaryNodeFieldNumber = 1,
    kPartitionCountFieldNumber = 3,
  };
  // repeated string replica_nodes = 2;
  int replica_nodes_size() const;
  private:
  int _internal_replica_nodes_size() const;

  public:
  void clear_replica_nodes() ;
  const std::string& replica_nodes(int index) const;
  std::string* mutable_replica_nodes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_replica_nodes(int index, Arg_&& value, Args_... args);
  std::string* add_replica_nodes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_replica_nodes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& replica_nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_replica_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_replica_nodes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_replica_nodes();

  public:
  // string primary_node = 1;
  void clear_primary_node() ;
  const std::string& primary_node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_node(Arg_&& arg, Args_... args);
  std::string* mutable_primary_node();
  PROTOBUF_NODISCARD std::string* release_primary_node();
  void set_allocated_primary_node(std::string* value);

  private:
  const std::string& _internal_primary_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_node(
      const std::string& value);
  std::string* _internal_mutable_primary_node();

  public:
  // int32 partition_count = 3;
  void clear_partition_count() ;
  ::int32_t partition_count() const;
  void set_partition_count(::int32_t value);

  private:
  ::int32_t _internal_partition_count() const;
  void _internal_set_partition_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.NodeAssignment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NodeAssignment& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> replica_nodes_;
    ::google::protobuf::internal::ArenaStringPtr primary_node_;
    ::int32_t partition_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queue final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queue) */ {
 public:
  inline queue() : queue(nullptr) {}
  ~queue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue(const queue& from) : queue(nullptr, from) {}
  inline queue(queue&& from) noexcept
      : queue(nullptr, std::move(from)) {}
  inline queue& operator=(const queue& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue& operator=(queue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue* internal_default_instance() {
    return reinterpret_cast<const queue*>(
        &_queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(queue& a, queue& b) { a.Swap(&b); }
  inline void Swap(queue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue& from) { queue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queue"; }

 protected:
  explicit queue(::google::protobuf::Arena* arena);
  queue(::google::protobuf::Arena* arena, const queue& from);
  queue(::google::protobuf::Arena* arena, queue&& from) noexcept
      : queue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kNodeAssignmentFieldNumber = 5,
    kCreationTimestampFieldNumber = 3,
    kMessageCountFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // .mom.NodeAssignment node_assignment = 5;
  bool has_node_assignment() const;
  void clear_node_assignment() ;
  const ::mom::NodeAssignment& node_assignment() const;
  PROTOBUF_NODISCARD ::mom::NodeAssignment* release_node_assignment();
  ::mom::NodeAssignment* mutable_node_assignment();
  void set_allocated_node_assignment(::mom::NodeAssignment* value);
  void unsafe_arena_set_allocated_node_assignment(::mom::NodeAssignment* value);
  ::mom::NodeAssignment* unsafe_arena_release_node_assignment();

  private:
  const ::mom::NodeAssignment& _internal_node_assignment() const;
  ::mom::NodeAssignment* _internal_mutable_node_assignment();

  public:
  // int64 creation_timestamp = 3;
  void clear_creation_timestamp() ;
  ::int64_t creation_timestamp() const;
  void set_creation_timestamp(::int64_t value);

  private:
  ::int64_t _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::int64_t value);

  public:
  // int32 message_count = 4;
  void clear_message_count() ;
  ::int32_t message_count() const;
  void set_message_count(::int32_t value);

  private:
  ::int32_t _internal_message_count() const;
  void _internal_set_message_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.queue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::mom::NodeAssignment* node_assignment_;
    ::int64_t creation_timestamp_;
    ::int32_t message_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_state_TopicAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_state_TopicAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state_TopicAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_state_TopicAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_state_TopicAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_state_TopicAssignmentsEntry_DoNotUse*>(
        &_cluster_state_TopicAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class cluster_state_QueueAssignmentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  cluster_state_QueueAssignmentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state_QueueAssignmentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit cluster_state_QueueAssignmentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const cluster_state_QueueAssignmentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const cluster_state_QueueAssignmentsEntry_DoNotUse*>(
        &_cluster_state_QueueAssignmentsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_mom_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class topic final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topic) */ {
 public:
  inline topic() : topic(nullptr) {}
  ~topic() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic(const topic& from) : topic(nullptr, from) {}
  inline topic(topic&& from) noexcept
      : topic(nullptr, std::move(from)) {}
  inline topic& operator=(const topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic& operator=(topic&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic* internal_default_instance() {
    return reinterpret_cast<const topic*>(
        &_topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(topic& a, topic& b) { a.Swap(&b); }
  inline void Swap(topic* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic& from) { topic::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topic"; }

 protected:
  explicit topic(::google::protobuf::Arena* arena);
  topic(::google::protobuf::Arena* arena, const topic& from);
  topic(::google::protobuf::Arena* arena, topic&& from) noexcept
      : topic(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscribersFieldNumber = 4,
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kCreationTimestampFieldNumber = 3,
    kMessageCountFieldNumber = 5,
  };
  // repeated .mom.queue subscribers = 4;
  int subscribers_size() const;
  private:
  int _internal_subscribers_size() const;

  public:
  void clear_subscribers() ;
  ::mom::queue* mutable_subscribers(int index);
  ::google::protobuf::RepeatedPtrField<::mom::queue>* mutable_subscribers();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& _internal_subscribers() const;
  ::google::protobuf::RepeatedPtrField<::mom::queue>* _internal_mutable_subscribers();
  public:
  const ::mom::queue& subscribers(int index) const;
  ::mom::queue* add_subscribers();
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& subscribers() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // int64 creation_timestamp = 3;
  void clear_creation_timestamp() ;
  ::int64_t creation_timestamp() const;
  void set_creation_timestamp(::int64_t value);

  private:
  ::int64_t _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::int64_t value);

  public:
  // int32 message_count = 5;
  void clear_message_count() ;
  ::int32_t message_count() const;
  void set_message_count(::int32_t value);

  private:
  ::int32_t _internal_message_count() const;
  void _internal_set_message_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.topic)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::queue > subscribers_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::int64_t creation_timestamp_;
    ::int32_t message_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class queues_response final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.queues_response) */ {
 public:
  inline queues_response() : queues_response(nullptr) {}
  ~queues_response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queues_response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queues_response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queues_response(
      ::google::protobuf::internal::ConstantInitialized);

  inline queues_response(const queues_response& from) : queues_response(nullptr, from) {}
  inline queues_response(queues_response&& from) noexcept
      : queues_response(nullptr, std::move(from)) {}
  inline queues_response& operator=(const queues_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline queues_response& operator=(queues_response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queues_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const queues_response* internal_default_instance() {
    return reinterpret_cast<const queues_response*>(
        &_queues_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(queues_response& a, queues_response& b) { a.Swap(&b); }
  inline void Swap(queues_response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queues_response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queues_response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queues_response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queues_response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queues_response& from) { queues_response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queues_response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.queues_response"; }

 protected:
  explicit queues_response(::google::protobuf::Arena* arena);
  queues_response(::google::protobuf::Arena* arena, const queues_response& from);
  queues_response(::google::protobuf::Arena* arena, queues_response&& from) noexcept
      : queues_response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQueuesFieldNumber = 3,
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .mom.queue queues = 3;
  int queues_size() const;
  private:
  int _internal_queues_size() const;

  public:
  void clear_queues() ;
  ::mom::queue* mutable_queues(int index);
  ::google::protobuf::RepeatedPtrField<::mom::queue>* mutable_queues();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& _internal_queues() const;
  ::google::protobuf::RepeatedPtrField<::mom::queue>* _internal_mutable_queues();
  public:
  const ::mom::queue& queues(int index) const;
  ::mom::queue* add_queues();
  const ::google::protobuf::RepeatedPtrField<::mom::queue>& queues() const;
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.queues_response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queues_response& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::queue > queues_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class cluster_state final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.cluster_state) */ {
 public:
  inline cluster_state() : cluster_state(nullptr) {}
  ~cluster_state() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(cluster_state* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(cluster_state));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR cluster_state(
      ::google::protobuf::internal::ConstantInitialized);

  inline cluster_state(const cluster_state& from) : cluster_state(nullptr, from) {}
  inline cluster_state(cluster_state&& from) noexcept
      : cluster_state(nullptr, std::move(from)) {}
  inline cluster_state& operator=(const cluster_state& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_state& operator=(cluster_state&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_state& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_state* internal_default_instance() {
    return reinterpret_cast<const cluster_state*>(
        &_cluster_state_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(cluster_state& a, cluster_state& b) { a.Swap(&b); }
  inline void Swap(cluster_state* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_state* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cluster_state* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<cluster_state>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const cluster_state& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const cluster_state& from) { cluster_state::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(cluster_state* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.cluster_state"; }

 protected:
  explicit cluster_state(::google::protobuf::Arena* arena);
  cluster_state(::google::protobuf::Arena* arena, const cluster_state& from);
  cluster_state(::google::protobuf::Arena* arena, cluster_state&& from) noexcept
      : cluster_state(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodesFieldNumber = 2,
    kTopicAssignmentsFieldNumber = 3,
    kQueueAssignmentsFieldNumber = 4,
    kLeaderIdFieldNumber = 1,
    kStateTimestampFieldNumber = 5,
  };
  // repeated .mom.node_info nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::mom::node_info* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* mutable_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::mom::node_info>* _internal_mutable_nodes();
  public:
  const ::mom::node_info& nodes(int index) const;
  ::mom::node_info* add_nodes();
  const ::google::protobuf::RepeatedPtrField<::mom::node_info>& nodes() const;
  // map<string, .mom.NodeAssignment> topic_assignments = 3;
  int topic_assignments_size() const;
  private:
  int _internal_topic_assignments_size() const;

  public:
  void clear_topic_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* mutable_topic_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& _internal_topic_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* _internal_mutable_topic_assignments();

  public:
  // map<string, .mom.NodeAssignment> queue_assignments = 4;
  int queue_assignments_size() const;
  private:
  int _internal_queue_assignments_size() const;

  public:
  void clear_queue_assignments() ;
  const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* mutable_queue_assignments();

  private:
  const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& _internal_queue_assignments() const;
  ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* _internal_mutable_queue_assignments();

  public:
  // string leader_id = 1;
  void clear_leader_id() ;
  const std::string& leader_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_id(Arg_&& arg, Args_... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* value);

  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(
      const std::string& value);
  std::string* _internal_mutable_leader_id();

  public:
  // int64 state_timestamp = 5;
  void clear_state_timestamp() ;
  ::int64_t state_timestamp() const;
  void set_state_timestamp(::int64_t value);

  private:
  ::int64_t _internal_state_timestamp() const;
  void _internal_set_state_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom.cluster_state)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const cluster_state& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::node_info > nodes_;
    ::google::protobuf::internal::MapField<cluster_state_TopicAssignmentsEntry_DoNotUse, std::string, ::mom::NodeAssignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        topic_assignments_;
    ::google::protobuf::internal::MapField<cluster_state_QueueAssignmentsEntry_DoNotUse, std::string, ::mom::NodeAssignment,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        queue_assignments_;
    ::google::protobuf::internal::ArenaStringPtr leader_id_;
    ::int64_t state_timestamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};
// -------------------------------------------------------------------

class topics_response final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom.topics_response) */ {
 public:
  inline topics_response() : topics_response(nullptr) {}
  ~topics_response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topics_response* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topics_response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topics_response(
      ::google::protobuf::internal::ConstantInitialized);

  inline topics_response(const topics_response& from) : topics_response(nullptr, from) {}
  inline topics_response(topics_response&& from) noexcept
      : topics_response(nullptr, std::move(from)) {}
  inline topics_response& operator=(const topics_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline topics_response& operator=(topics_response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topics_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const topics_response* internal_default_instance() {
    return reinterpret_cast<const topics_response*>(
        &_topics_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(topics_response& a, topics_response& b) { a.Swap(&b); }
  inline void Swap(topics_response* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topics_response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topics_response* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topics_response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topics_response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topics_response& from) { topics_response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topics_response* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom.topics_response"; }

 protected:
  explicit topics_response(::google::protobuf::Arena* arena);
  topics_response(::google::protobuf::Arena* arena, const topics_response& from);
  topics_response(::google::protobuf::Arena* arena, topics_response&& from) noexcept
      : topics_response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .mom.topic topics = 3;
  int topics_size() const;
  private:
  int _internal_topics_size() const;

  public:
  void clear_topics() ;
  ::mom::topic* mutable_topics(int index);
  ::google::protobuf::RepeatedPtrField<::mom::topic>* mutable_topics();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom::topic>& _internal_topics() const;
  ::google::protobuf::RepeatedPtrField<::mom::topic>* _internal_mutable_topics();
  public:
  const ::mom::topic& topics(int index) const;
  ::mom::topic* add_topics();
  const ::google::protobuf::RepeatedPtrField<::mom::topic>& topics() const;
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom.topics_response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topics_response& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom::topic > topics_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// node_status

// bool active = 1;
inline void node_status::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool node_status::active() const {
  // @@protoc_insertion_point(field_get:mom.node_status.active)
  return _internal_active();
}
inline void node_status::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:mom.node_status.active)
}
inline bool node_status::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void node_status::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// status

// bool success = 1;
inline void status::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool status::success() const {
  // @@protoc_insertion_point(field_get:mom.status.success)
  return _internal_success();
}
inline void status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.status.success)
}
inline bool status::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void status::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void status::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& status::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void status::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.status.message)
}
inline std::string* status::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.status.message)
  return _s;
}
inline const std::string& status::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void status::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* status::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* status::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.status.message)
  return _impl_.message_.Release();
}
inline void status::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.status.message)
}

// -------------------------------------------------------------------

// structure_message

// string structure_name = 1;
inline void structure_message::clear_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.ClearToEmpty();
}
inline const std::string& structure_message::structure_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.structure_message.structure_name)
  return _internal_structure_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_structure_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.structure_message.structure_name)
}
inline std::string* structure_message::mutable_structure_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_structure_name();
  // @@protoc_insertion_point(field_mutable:mom.structure_message.structure_name)
  return _s;
}
inline const std::string& structure_message::_internal_structure_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.structure_name_.Get();
}
inline void structure_message::_internal_set_structure_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.structure_name_.Mutable( GetArena());
}
inline std::string* structure_message::release_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.structure_message.structure_name)
  return _impl_.structure_name_.Release();
}
inline void structure_message::set_allocated_structure_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.structure_name_.IsDefault()) {
    _impl_.structure_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.structure_message.structure_name)
}

// string content = 2;
inline void structure_message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& structure_message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.structure_message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.structure_message.content)
}
inline std::string* structure_message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom.structure_message.content)
  return _s;
}
inline const std::string& structure_message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void structure_message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* structure_message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.structure_message.content)
  return _impl_.content_.Release();
}
inline void structure_message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.structure_message.content)
}

// string sender = 3;
inline void structure_message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& structure_message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.structure_message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.structure_message.sender)
}
inline std::string* structure_message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom.structure_message.sender)
  return _s;
}
inline const std::string& structure_message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void structure_message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* structure_message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.structure_message.sender)
  return _impl_.sender_.Release();
}
inline void structure_message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.structure_message.sender)
}

// int64 timestamp = 4;
inline void structure_message::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t structure_message::timestamp() const {
  // @@protoc_insertion_point(field_get:mom.structure_message.timestamp)
  return _internal_timestamp();
}
inline void structure_message::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.structure_message.timestamp)
}
inline ::int64_t structure_message::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void structure_message::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bool persistent = 5;
inline void structure_message::clear_persistent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = false;
}
inline bool structure_message::persistent() const {
  // @@protoc_insertion_point(field_get:mom.structure_message.persistent)
  return _internal_persistent();
}
inline void structure_message::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:mom.structure_message.persistent)
}
inline bool structure_message::_internal_persistent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_;
}
inline void structure_message::_internal_set_persistent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = value;
}

// -------------------------------------------------------------------

// message_identifier

// string message_id = 1;
inline void message_identifier::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& message_identifier::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.message_identifier.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message_identifier::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.message_identifier.message_id)
}
inline std::string* message_identifier::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:mom.message_identifier.message_id)
  return _s;
}
inline const std::string& message_identifier::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void message_identifier::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* message_identifier::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* message_identifier::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.message_identifier.message_id)
  return _impl_.message_id_.Release();
}
inline void message_identifier::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.message_identifier.message_id)
}

// string destination_name = 2;
inline void message_identifier::clear_destination_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_name_.ClearToEmpty();
}
inline const std::string& message_identifier::destination_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.message_identifier.destination_name)
  return _internal_destination_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message_identifier::set_destination_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.message_identifier.destination_name)
}
inline std::string* message_identifier::mutable_destination_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination_name();
  // @@protoc_insertion_point(field_mutable:mom.message_identifier.destination_name)
  return _s;
}
inline const std::string& message_identifier::_internal_destination_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_name_.Get();
}
inline void message_identifier::_internal_set_destination_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_name_.Set(value, GetArena());
}
inline std::string* message_identifier::_internal_mutable_destination_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.destination_name_.Mutable( GetArena());
}
inline std::string* message_identifier::release_destination_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.message_identifier.destination_name)
  return _impl_.destination_name_.Release();
}
inline void message_identifier::set_allocated_destination_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.destination_name_.IsDefault()) {
    _impl_.destination_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.message_identifier.destination_name)
}

// bool is_topic = 3;
inline void message_identifier::clear_is_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_topic_ = false;
}
inline bool message_identifier::is_topic() const {
  // @@protoc_insertion_point(field_get:mom.message_identifier.is_topic)
  return _internal_is_topic();
}
inline void message_identifier::set_is_topic(bool value) {
  _internal_set_is_topic(value);
  // @@protoc_insertion_point(field_set:mom.message_identifier.is_topic)
}
inline bool message_identifier::_internal_is_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_topic_;
}
inline void message_identifier::_internal_set_is_topic(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_topic_ = value;
}

// -------------------------------------------------------------------

// message_status

// bool success = 1;
inline void message_status::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool message_status::success() const {
  // @@protoc_insertion_point(field_get:mom.message_status.success)
  return _internal_success();
}
inline void message_status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.message_status.success)
}
inline bool message_status::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void message_status::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void message_status::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& message_status::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.message_status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message_status::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.message_status.message)
}
inline std::string* message_status::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.message_status.message)
  return _s;
}
inline const std::string& message_status::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void message_status::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* message_status::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* message_status::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.message_status.message)
  return _impl_.message_.Release();
}
inline void message_status::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.message_status.message)
}

// -------------------------------------------------------------------

// queue_identifier

// string name = 1;
inline void queue_identifier::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& queue_identifier::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_identifier.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_identifier::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_identifier.name)
}
inline std::string* queue_identifier::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.queue_identifier.name)
  return _s;
}
inline const std::string& queue_identifier::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void queue_identifier::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* queue_identifier::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* queue_identifier::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_identifier.name)
  return _impl_.name_.Release();
}
inline void queue_identifier::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_identifier.name)
}

// string owner = 2;
inline void queue_identifier::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& queue_identifier::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_identifier.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_identifier::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_identifier.owner)
}
inline std::string* queue_identifier::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.queue_identifier.owner)
  return _s;
}
inline const std::string& queue_identifier::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void queue_identifier::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* queue_identifier::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* queue_identifier::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_identifier.owner)
  return _impl_.owner_.Release();
}
inline void queue_identifier::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_identifier.owner)
}

// -------------------------------------------------------------------

// queue_config

// string name = 1;
inline void queue_config::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& queue_config::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_config.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_config::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_config.name)
}
inline std::string* queue_config::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.queue_config.name)
  return _s;
}
inline const std::string& queue_config::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void queue_config::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* queue_config::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* queue_config::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_config.name)
  return _impl_.name_.Release();
}
inline void queue_config::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_config.name)
}

// string owner = 2;
inline void queue_config::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& queue_config::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue_config.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_config::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue_config.owner)
}
inline std::string* queue_config::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.queue_config.owner)
  return _s;
}
inline const std::string& queue_config::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void queue_config::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* queue_config::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* queue_config::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue_config.owner)
  return _impl_.owner_.Release();
}
inline void queue_config::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue_config.owner)
}

// -------------------------------------------------------------------

// queue

// string name = 1;
inline void queue::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& queue::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue.name)
}
inline std::string* queue::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.queue.name)
  return _s;
}
inline const std::string& queue::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void queue::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* queue::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* queue::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue.name)
  return _impl_.name_.Release();
}
inline void queue::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue.name)
}

// string owner = 2;
inline void queue::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& queue::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queue.owner)
}
inline std::string* queue::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.queue.owner)
  return _s;
}
inline const std::string& queue::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void queue::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* queue::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* queue::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue.owner)
  return _impl_.owner_.Release();
}
inline void queue::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queue.owner)
}

// int64 creation_timestamp = 3;
inline void queue::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = ::int64_t{0};
}
inline ::int64_t queue::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:mom.queue.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void queue::set_creation_timestamp(::int64_t value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.queue.creation_timestamp)
}
inline ::int64_t queue::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_;
}
inline void queue::_internal_set_creation_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = value;
}

// int32 message_count = 4;
inline void queue::clear_message_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = 0;
}
inline ::int32_t queue::message_count() const {
  // @@protoc_insertion_point(field_get:mom.queue.message_count)
  return _internal_message_count();
}
inline void queue::set_message_count(::int32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:mom.queue.message_count)
}
inline ::int32_t queue::_internal_message_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_count_;
}
inline void queue::_internal_set_message_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = value;
}

// .mom.NodeAssignment node_assignment = 5;
inline bool queue::has_node_assignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_assignment_ != nullptr);
  return value;
}
inline void queue::clear_node_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_assignment_ != nullptr) _impl_.node_assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mom::NodeAssignment& queue::_internal_node_assignment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mom::NodeAssignment* p = _impl_.node_assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::mom::NodeAssignment&>(::mom::_NodeAssignment_default_instance_);
}
inline const ::mom::NodeAssignment& queue::node_assignment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queue.node_assignment)
  return _internal_node_assignment();
}
inline void queue::unsafe_arena_set_allocated_node_assignment(::mom::NodeAssignment* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.node_assignment_);
  }
  _impl_.node_assignment_ = reinterpret_cast<::mom::NodeAssignment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mom.queue.node_assignment)
}
inline ::mom::NodeAssignment* queue::release_node_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::NodeAssignment* released = _impl_.node_assignment_;
  _impl_.node_assignment_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mom::NodeAssignment* queue::unsafe_arena_release_node_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queue.node_assignment)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mom::NodeAssignment* temp = _impl_.node_assignment_;
  _impl_.node_assignment_ = nullptr;
  return temp;
}
inline ::mom::NodeAssignment* queue::_internal_mutable_node_assignment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.node_assignment_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mom::NodeAssignment>(GetArena());
    _impl_.node_assignment_ = reinterpret_cast<::mom::NodeAssignment*>(p);
  }
  return _impl_.node_assignment_;
}
inline ::mom::NodeAssignment* queue::mutable_node_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mom::NodeAssignment* _msg = _internal_mutable_node_assignment();
  // @@protoc_insertion_point(field_mutable:mom.queue.node_assignment)
  return _msg;
}
inline void queue::set_allocated_node_assignment(::mom::NodeAssignment* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.node_assignment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.node_assignment_ = reinterpret_cast<::mom::NodeAssignment*>(value);
  // @@protoc_insertion_point(field_set_allocated:mom.queue.node_assignment)
}

// -------------------------------------------------------------------

// queues_response

// bool success = 1;
inline void queues_response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool queues_response::success() const {
  // @@protoc_insertion_point(field_get:mom.queues_response.success)
  return _internal_success();
}
inline void queues_response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.queues_response.success)
}
inline bool queues_response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void queues_response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void queues_response::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& queues_response::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queues_response.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queues_response::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.queues_response.message)
}
inline std::string* queues_response::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.queues_response.message)
  return _s;
}
inline const std::string& queues_response::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void queues_response::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* queues_response::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* queues_response::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.queues_response.message)
  return _impl_.message_.Release();
}
inline void queues_response::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.queues_response.message)
}

// repeated .mom.queue queues = 3;
inline int queues_response::_internal_queues_size() const {
  return _internal_queues().size();
}
inline int queues_response::queues_size() const {
  return _internal_queues_size();
}
inline void queues_response::clear_queues() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queues_.Clear();
}
inline ::mom::queue* queues_response::mutable_queues(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.queues_response.queues)
  return _internal_mutable_queues()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>* queues_response::mutable_queues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.queues_response.queues)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_queues();
}
inline const ::mom::queue& queues_response::queues(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.queues_response.queues)
  return _internal_queues().Get(index);
}
inline ::mom::queue* queues_response::add_queues() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::queue* _add = _internal_mutable_queues()->Add();
  // @@protoc_insertion_point(field_add:mom.queues_response.queues)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>& queues_response::queues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.queues_response.queues)
  return _internal_queues();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>&
queues_response::_internal_queues() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queues_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>*
queues_response::_internal_mutable_queues() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.queues_;
}

// -------------------------------------------------------------------

// topic_identifier

// string name = 1;
inline void topic_identifier::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& topic_identifier::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_identifier.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_identifier::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_identifier.name)
}
inline std::string* topic_identifier::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_identifier.name)
  return _s;
}
inline const std::string& topic_identifier::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void topic_identifier::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* topic_identifier::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* topic_identifier::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_identifier.name)
  return _impl_.name_.Release();
}
inline void topic_identifier::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_identifier.name)
}

// string owner = 2;
inline void topic_identifier::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& topic_identifier::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_identifier.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_identifier::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_identifier.owner)
}
inline std::string* topic_identifier::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic_identifier.owner)
  return _s;
}
inline const std::string& topic_identifier::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void topic_identifier::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* topic_identifier::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* topic_identifier::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_identifier.owner)
  return _impl_.owner_.Release();
}
inline void topic_identifier::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_identifier.owner)
}

// -------------------------------------------------------------------

// topic_config

// string name = 1;
inline void topic_config::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& topic_config::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_config.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_config::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_config.name)
}
inline std::string* topic_config::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_config.name)
  return _s;
}
inline const std::string& topic_config::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void topic_config::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* topic_config::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* topic_config::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_config.name)
  return _impl_.name_.Release();
}
inline void topic_config::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_config.name)
}

// string owner = 2;
inline void topic_config::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& topic_config::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_config.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_config::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_config.owner)
}
inline std::string* topic_config::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic_config.owner)
  return _s;
}
inline const std::string& topic_config::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void topic_config::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* topic_config::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* topic_config::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_config.owner)
  return _impl_.owner_.Release();
}
inline void topic_config::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_config.owner)
}

// -------------------------------------------------------------------

// topic

// string name = 1;
inline void topic::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& topic::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic.name)
}
inline std::string* topic::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom.topic.name)
  return _s;
}
inline const std::string& topic::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void topic::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* topic::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* topic::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic.name)
  return _impl_.name_.Release();
}
inline void topic::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic.name)
}

// string owner = 2;
inline void topic::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& topic::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic.owner)
}
inline std::string* topic::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic.owner)
  return _s;
}
inline const std::string& topic::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void topic::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* topic::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* topic::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic.owner)
  return _impl_.owner_.Release();
}
inline void topic::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic.owner)
}

// int64 creation_timestamp = 3;
inline void topic::clear_creation_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = ::int64_t{0};
}
inline ::int64_t topic::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:mom.topic.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void topic::set_creation_timestamp(::int64_t value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.topic.creation_timestamp)
}
inline ::int64_t topic::_internal_creation_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_timestamp_;
}
inline void topic::_internal_set_creation_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_timestamp_ = value;
}

// repeated .mom.queue subscribers = 4;
inline int topic::_internal_subscribers_size() const {
  return _internal_subscribers().size();
}
inline int topic::subscribers_size() const {
  return _internal_subscribers_size();
}
inline void topic::clear_subscribers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscribers_.Clear();
}
inline ::mom::queue* topic::mutable_subscribers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.topic.subscribers)
  return _internal_mutable_subscribers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>* topic::mutable_subscribers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.topic.subscribers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subscribers();
}
inline const ::mom::queue& topic::subscribers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic.subscribers)
  return _internal_subscribers().Get(index);
}
inline ::mom::queue* topic::add_subscribers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::queue* _add = _internal_mutable_subscribers()->Add();
  // @@protoc_insertion_point(field_add:mom.topic.subscribers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>& topic::subscribers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.topic.subscribers)
  return _internal_subscribers();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::queue>&
topic::_internal_subscribers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscribers_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::queue>*
topic::_internal_mutable_subscribers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subscribers_;
}

// int32 message_count = 5;
inline void topic::clear_message_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = 0;
}
inline ::int32_t topic::message_count() const {
  // @@protoc_insertion_point(field_get:mom.topic.message_count)
  return _internal_message_count();
}
inline void topic::set_message_count(::int32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:mom.topic.message_count)
}
inline ::int32_t topic::_internal_message_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_count_;
}
inline void topic::_internal_set_message_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = value;
}

// -------------------------------------------------------------------

// topic_subscription

// string topic_name = 1;
inline void topic_subscription::clear_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& topic_subscription::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_subscription.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_subscription.topic_name)
}
inline std::string* topic_subscription::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_subscription.topic_name)
  return _s;
}
inline const std::string& topic_subscription::_internal_topic_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_name_.Get();
}
inline void topic_subscription::_internal_set_topic_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_subscription.topic_name)
  return _impl_.topic_name_.Release();
}
inline void topic_subscription::set_allocated_topic_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_subscription.topic_name)
}

// string topic_owner = 2;
inline void topic_subscription::clear_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.ClearToEmpty();
}
inline const std::string& topic_subscription::topic_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_subscription.topic_owner)
  return _internal_topic_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_topic_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_subscription.topic_owner)
}
inline std::string* topic_subscription::mutable_topic_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic_subscription.topic_owner)
  return _s;
}
inline const std::string& topic_subscription::_internal_topic_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_owner_.Get();
}
inline void topic_subscription::_internal_set_topic_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_owner_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_subscription.topic_owner)
  return _impl_.topic_owner_.Release();
}
inline void topic_subscription::set_allocated_topic_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_owner_.IsDefault()) {
    _impl_.topic_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_subscription.topic_owner)
}

// string subscriber_queue_name = 3;
inline void topic_subscription::clear_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.ClearToEmpty();
}
inline const std::string& topic_subscription::subscriber_queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_subscription.subscriber_queue_name)
  return _internal_subscriber_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_subscriber_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_subscription.subscriber_queue_name)
}
inline std::string* topic_subscription::mutable_subscriber_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_queue_name();
  // @@protoc_insertion_point(field_mutable:mom.topic_subscription.subscriber_queue_name)
  return _s;
}
inline const std::string& topic_subscription::_internal_subscriber_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_queue_name_.Get();
}
inline void topic_subscription::_internal_set_subscriber_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_queue_name_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_subscription.subscriber_queue_name)
  return _impl_.subscriber_queue_name_.Release();
}
inline void topic_subscription::set_allocated_subscriber_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_queue_name_.IsDefault()) {
    _impl_.subscriber_queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_subscription.subscriber_queue_name)
}

// string subscriber_queue_owner = 4;
inline void topic_subscription::clear_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.ClearToEmpty();
}
inline const std::string& topic_subscription::subscriber_queue_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topic_subscription.subscriber_queue_owner)
  return _internal_subscriber_queue_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_subscriber_queue_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topic_subscription.subscriber_queue_owner)
}
inline std::string* topic_subscription::mutable_subscriber_queue_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_queue_owner();
  // @@protoc_insertion_point(field_mutable:mom.topic_subscription.subscriber_queue_owner)
  return _s;
}
inline const std::string& topic_subscription::_internal_subscriber_queue_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_queue_owner_.Get();
}
inline void topic_subscription::_internal_set_subscriber_queue_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_queue_owner_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topic_subscription.subscriber_queue_owner)
  return _impl_.subscriber_queue_owner_.Release();
}
inline void topic_subscription::set_allocated_subscriber_queue_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_queue_owner_.IsDefault()) {
    _impl_.subscriber_queue_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topic_subscription.subscriber_queue_owner)
}

// bool durable = 5;
inline void topic_subscription::clear_durable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = false;
}
inline bool topic_subscription::durable() const {
  // @@protoc_insertion_point(field_get:mom.topic_subscription.durable)
  return _internal_durable();
}
inline void topic_subscription::set_durable(bool value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:mom.topic_subscription.durable)
}
inline bool topic_subscription::_internal_durable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.durable_;
}
inline void topic_subscription::_internal_set_durable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = value;
}

// -------------------------------------------------------------------

// topics_response

// bool success = 1;
inline void topics_response::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool topics_response::success() const {
  // @@protoc_insertion_point(field_get:mom.topics_response.success)
  return _internal_success();
}
inline void topics_response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.topics_response.success)
}
inline bool topics_response::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void topics_response::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void topics_response::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& topics_response::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topics_response.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topics_response::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.topics_response.message)
}
inline std::string* topics_response::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.topics_response.message)
  return _s;
}
inline const std::string& topics_response::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void topics_response::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* topics_response::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* topics_response::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.topics_response.message)
  return _impl_.message_.Release();
}
inline void topics_response::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.topics_response.message)
}

// repeated .mom.topic topics = 3;
inline int topics_response::_internal_topics_size() const {
  return _internal_topics().size();
}
inline int topics_response::topics_size() const {
  return _internal_topics_size();
}
inline void topics_response::clear_topics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topics_.Clear();
}
inline ::mom::topic* topics_response::mutable_topics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.topics_response.topics)
  return _internal_mutable_topics()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::topic>* topics_response::mutable_topics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.topics_response.topics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_topics();
}
inline const ::mom::topic& topics_response::topics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.topics_response.topics)
  return _internal_topics().Get(index);
}
inline ::mom::topic* topics_response::add_topics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::topic* _add = _internal_mutable_topics()->Add();
  // @@protoc_insertion_point(field_add:mom.topics_response.topics)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::topic>& topics_response::topics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.topics_response.topics)
  return _internal_topics();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::topic>&
topics_response::_internal_topics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topics_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::topic>*
topics_response::_internal_mutable_topics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.topics_;
}

// -------------------------------------------------------------------

// NodeID

// string node_id = 1;
inline void NodeID::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
}
inline const std::string& NodeID::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.NodeID.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeID::set_node_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.NodeID.node_id)
}
inline std::string* NodeID::mutable_node_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:mom.NodeID.node_id)
  return _s;
}
inline const std::string& NodeID::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void NodeID::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* NodeID::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* NodeID::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.NodeID.node_id)
  return _impl_.node_id_.Release();
}
inline void NodeID::set_allocated_node_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.NodeID.node_id)
}

// -------------------------------------------------------------------

// node_info

// int32 node_id = 1;
inline void node_info::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = 0;
}
inline ::int32_t node_info::node_id() const {
  // @@protoc_insertion_point(field_get:mom.node_info.node_id)
  return _internal_node_id();
}
inline void node_info::set_node_id(::int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:mom.node_info.node_id)
}
inline ::int32_t node_info::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_;
}
inline void node_info::_internal_set_node_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_ = value;
}

// string ip = 2;
inline void node_info::clear_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& node_info::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.node_info.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void node_info::set_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.node_info.ip)
}
inline std::string* node_info::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:mom.node_info.ip)
  return _s;
}
inline const std::string& node_info::_internal_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_.Get();
}
inline void node_info::_internal_set_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* node_info::_internal_mutable_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* node_info::release_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.node_info.ip)
  return _impl_.ip_.Release();
}
inline void node_info::set_allocated_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.node_info.ip)
}

// int32 port = 3;
inline void node_info::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t node_info::port() const {
  // @@protoc_insertion_point(field_get:mom.node_info.port)
  return _internal_port();
}
inline void node_info::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:mom.node_info.port)
}
inline ::int32_t node_info::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void node_info::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// bool leader = 4;
inline void node_info::clear_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_ = false;
}
inline bool node_info::leader() const {
  // @@protoc_insertion_point(field_get:mom.node_info.leader)
  return _internal_leader();
}
inline void node_info::set_leader(bool value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:mom.node_info.leader)
}
inline bool node_info::_internal_leader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_;
}
inline void node_info::_internal_set_leader(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_ = value;
}

// -------------------------------------------------------------------

// NodeAssignment

// string primary_node = 1;
inline void NodeAssignment::clear_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.ClearToEmpty();
}
inline const std::string& NodeAssignment::primary_node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.NodeAssignment.primary_node)
  return _internal_primary_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NodeAssignment::set_primary_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.NodeAssignment.primary_node)
}
inline std::string* NodeAssignment::mutable_primary_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_primary_node();
  // @@protoc_insertion_point(field_mutable:mom.NodeAssignment.primary_node)
  return _s;
}
inline const std::string& NodeAssignment::_internal_primary_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.primary_node_.Get();
}
inline void NodeAssignment::_internal_set_primary_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.Set(value, GetArena());
}
inline std::string* NodeAssignment::_internal_mutable_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.primary_node_.Mutable( GetArena());
}
inline std::string* NodeAssignment::release_primary_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.NodeAssignment.primary_node)
  return _impl_.primary_node_.Release();
}
inline void NodeAssignment::set_allocated_primary_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.primary_node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.primary_node_.IsDefault()) {
    _impl_.primary_node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.NodeAssignment.primary_node)
}

// repeated string replica_nodes = 2;
inline int NodeAssignment::_internal_replica_nodes_size() const {
  return _internal_replica_nodes().size();
}
inline int NodeAssignment::replica_nodes_size() const {
  return _internal_replica_nodes_size();
}
inline void NodeAssignment::clear_replica_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.replica_nodes_.Clear();
}
inline std::string* NodeAssignment::add_replica_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_replica_nodes()->Add();
  // @@protoc_insertion_point(field_add_mutable:mom.NodeAssignment.replica_nodes)
  return _s;
}
inline const std::string& NodeAssignment::replica_nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.NodeAssignment.replica_nodes)
  return _internal_replica_nodes().Get(index);
}
inline std::string* NodeAssignment::mutable_replica_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.NodeAssignment.replica_nodes)
  return _internal_mutable_replica_nodes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void NodeAssignment::set_replica_nodes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_replica_nodes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:mom.NodeAssignment.replica_nodes)
}
template <typename Arg_, typename... Args_>
inline void NodeAssignment::add_replica_nodes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_replica_nodes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:mom.NodeAssignment.replica_nodes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeAssignment::replica_nodes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.NodeAssignment.replica_nodes)
  return _internal_replica_nodes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeAssignment::mutable_replica_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.NodeAssignment.replica_nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_replica_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NodeAssignment::_internal_replica_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.replica_nodes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NodeAssignment::_internal_mutable_replica_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.replica_nodes_;
}

// int32 partition_count = 3;
inline void NodeAssignment::clear_partition_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.partition_count_ = 0;
}
inline ::int32_t NodeAssignment::partition_count() const {
  // @@protoc_insertion_point(field_get:mom.NodeAssignment.partition_count)
  return _internal_partition_count();
}
inline void NodeAssignment::set_partition_count(::int32_t value) {
  _internal_set_partition_count(value);
  // @@protoc_insertion_point(field_set:mom.NodeAssignment.partition_count)
}
inline ::int32_t NodeAssignment::_internal_partition_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.partition_count_;
}
inline void NodeAssignment::_internal_set_partition_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.partition_count_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// cluster_state

// string leader_id = 1;
inline void cluster_state::clear_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& cluster_state::leader_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_state.leader_id)
  return _internal_leader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void cluster_state::set_leader_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.cluster_state.leader_id)
}
inline std::string* cluster_state::mutable_leader_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:mom.cluster_state.leader_id)
  return _s;
}
inline const std::string& cluster_state::_internal_leader_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_id_.Get();
}
inline void cluster_state::_internal_set_leader_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(value, GetArena());
}
inline std::string* cluster_state::_internal_mutable_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_id_.Mutable( GetArena());
}
inline std::string* cluster_state::release_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.cluster_state.leader_id)
  return _impl_.leader_id_.Release();
}
inline void cluster_state::set_allocated_leader_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.cluster_state.leader_id)
}

// repeated .mom.node_info nodes = 2;
inline int cluster_state::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int cluster_state::nodes_size() const {
  return _internal_nodes_size();
}
inline void cluster_state::clear_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodes_.Clear();
}
inline ::mom::node_info* cluster_state::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom.cluster_state.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>* cluster_state::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom.cluster_state.nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nodes();
}
inline const ::mom::node_info& cluster_state::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_state.nodes)
  return _internal_nodes().Get(index);
}
inline ::mom::node_info* cluster_state::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom::node_info* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:mom.cluster_state.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>& cluster_state::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom.cluster_state.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::mom::node_info>&
cluster_state::_internal_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::mom::node_info>*
cluster_state::_internal_mutable_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nodes_;
}

// map<string, .mom.NodeAssignment> topic_assignments = 3;
inline int cluster_state::_internal_topic_assignments_size() const {
  return _internal_topic_assignments().size();
}
inline int cluster_state::topic_assignments_size() const {
  return _internal_topic_assignments_size();
}
inline void cluster_state::clear_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& cluster_state::_internal_topic_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& cluster_state::topic_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_state.topic_assignments)
  return _internal_topic_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* cluster_state::_internal_mutable_topic_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* cluster_state::mutable_topic_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_state.topic_assignments)
  return _internal_mutable_topic_assignments();
}

// map<string, .mom.NodeAssignment> queue_assignments = 4;
inline int cluster_state::_internal_queue_assignments_size() const {
  return _internal_queue_assignments().size();
}
inline int cluster_state::queue_assignments_size() const {
  return _internal_queue_assignments_size();
}
inline void cluster_state::clear_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_assignments_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& cluster_state::_internal_queue_assignments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_assignments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::mom::NodeAssignment>& cluster_state::queue_assignments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mom.cluster_state.queue_assignments)
  return _internal_queue_assignments();
}
inline ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* cluster_state::_internal_mutable_queue_assignments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_assignments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::mom::NodeAssignment>* cluster_state::mutable_queue_assignments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mom.cluster_state.queue_assignments)
  return _internal_mutable_queue_assignments();
}

// int64 state_timestamp = 5;
inline void cluster_state::clear_state_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_timestamp_ = ::int64_t{0};
}
inline ::int64_t cluster_state::state_timestamp() const {
  // @@protoc_insertion_point(field_get:mom.cluster_state.state_timestamp)
  return _internal_state_timestamp();
}
inline void cluster_state::set_state_timestamp(::int64_t value) {
  _internal_set_state_timestamp(value);
  // @@protoc_insertion_point(field_set:mom.cluster_state.state_timestamp)
}
inline ::int64_t cluster_state::_internal_state_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_timestamp_;
}
inline void cluster_state::_internal_set_state_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_timestamp_ = value;
}

// -------------------------------------------------------------------

// cluster_info

// bool success = 1;
inline void cluster_info::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool cluster_info::success() const {
  // @@protoc_insertion_point(field_get:mom.cluster_info.success)
  return _internal_success();
}
inline void cluster_info::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom.cluster_info.success)
}
inline bool cluster_info::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void cluster_info::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void cluster_info::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& cluster_info::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom.cluster_info.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void cluster_info::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom.cluster_info.message)
}
inline std::string* cluster_info::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom.cluster_info.message)
  return _s;
}
inline const std::string& cluster_info::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void cluster_info::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* cluster_info::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* cluster_info::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom.cluster_info.message)
  return _impl_.message_.Release();
}
inline void cluster_info::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom.cluster_info.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mom


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mom_2eproto_2epb_2eh
