// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom.proto

#include "mom.pb.h"
#include "mom.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mom {

static const char* MOM_service_method_names[] = {
  "/mom.MOM_service/sync_topics",
  "/mom.MOM_service/sync_queues",
  "/mom.MOM_service/create_queue",
  "/mom.MOM_service/delete_queue",
  "/mom.MOM_service/list_queues",
  "/mom.MOM_service/create_topic",
  "/mom.MOM_service/delete_topic",
  "/mom.MOM_service/list_topics",
  "/mom.MOM_service/subscribe_topic",
  "/mom.MOM_service/unsubscribe_topic",
  "/mom.MOM_service/send_queue_message",
  "/mom.MOM_service/receive_queue_message",
  "/mom.MOM_service/publish_topic_message",
  "/mom.MOM_service/receive_topic_message",
  "/mom.MOM_service/join_cluster",
  "/mom.MOM_service/leave_cluster",
  "/mom.MOM_service/heartbeat",
};

std::unique_ptr< MOM_service::Stub> MOM_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MOM_service::Stub> stub(new MOM_service::Stub(channel, options));
  return stub;
}

MOM_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sync_topics_(MOM_service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sync_queues_(MOM_service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_queue_(MOM_service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delete_queue_(MOM_service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_queues_(MOM_service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_topic_(MOM_service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delete_topic_(MOM_service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_topics_(MOM_service_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_subscribe_topic_(MOM_service_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unsubscribe_topic_(MOM_service_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_queue_message_(MOM_service_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_receive_queue_message_(MOM_service_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_publish_topic_message_(MOM_service_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_receive_topic_message_(MOM_service_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_join_cluster_(MOM_service_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_leave_cluster_(MOM_service_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_heartbeat_(MOM_service_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MOM_service::Stub::sync_topics(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::state_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sync_topics_, context, request, response);
}

void MOM_service::Stub::async::sync_topics(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_topics_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::sync_topics(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_topics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::PrepareAsyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::state_response, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sync_topics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::Asyncsync_topicsRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsync_topicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::sync_queues(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::state_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sync_queues_, context, request, response);
}

void MOM_service::Stub::async::sync_queues(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_queues_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::sync_queues(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sync_queues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::PrepareAsyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::state_response, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sync_queues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::Asyncsync_queuesRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsync_queuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::create_queue(::grpc::ClientContext* context, const ::mom::queue_config& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::queue_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_queue_, context, request, response);
}

void MOM_service::Stub::async::create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::queue_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_queue_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::create_queue(::grpc::ClientContext* context, const ::mom::queue_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_queue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::queue_config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_queue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asynccreate_queueRaw(::grpc::ClientContext* context, const ::mom::queue_config& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate_queueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::delete_queue(::grpc::ClientContext* context, const ::mom::queue& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::queue, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delete_queue_, context, request, response);
}

void MOM_service::Stub::async::delete_queue(::grpc::ClientContext* context, const ::mom::queue* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::queue, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_queue_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::delete_queue(::grpc::ClientContext* context, const ::mom::queue* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_queue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::queue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delete_queue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asyncdelete_queueRaw(::grpc::ClientContext* context, const ::mom::queue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelete_queueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::list_queues(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::state_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_queues_, context, request, response);
}

void MOM_service::Stub::async::list_queues(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_queues_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::list_queues(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_queues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::PrepareAsynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::state_response, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_queues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::Asynclist_queuesRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_queuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::create_topic(::grpc::ClientContext* context, const ::mom::topic_config& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_create_topic_, context, request, response);
}

void MOM_service::Stub::async::create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_topic_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::create_topic(::grpc::ClientContext* context, const ::mom::topic_config* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_create_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::topic_config, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_create_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asynccreate_topicRaw(::grpc::ClientContext* context, const ::mom::topic_config& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreate_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::delete_topic(::grpc::ClientContext* context, const ::mom::topic& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delete_topic_, context, request, response);
}

void MOM_service::Stub::async::delete_topic(::grpc::ClientContext* context, const ::mom::topic* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_topic_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::delete_topic(::grpc::ClientContext* context, const ::mom::topic* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::topic, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delete_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asyncdelete_topicRaw(::grpc::ClientContext* context, const ::mom::topic& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelete_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::list_topics(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::state_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_list_topics_, context, request, response);
}

void MOM_service::Stub::async::list_topics(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_topics_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::list_topics(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::state_response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_list_topics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::PrepareAsynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::state_response, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_list_topics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::state_response>* MOM_service::Stub::Asynclist_topicsRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclist_topicsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_subscribe_topic_, context, request, response);
}

void MOM_service::Stub::async::subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_subscribe_topic_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::subscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_subscribe_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::topic_id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_subscribe_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asyncsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsubscribe_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unsubscribe_topic_, context, request, response);
}

void MOM_service::Stub::async::unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unsubscribe_topic_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::unsubscribe_topic(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unsubscribe_topic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::topic_id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unsubscribe_topic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asyncunsubscribe_topicRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunsubscribe_topicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message& request, ::mom::message_status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::queue_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_queue_message_, context, request, response);
}

void MOM_service::Stub::async::send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::queue_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_queue_message_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::send_queue_message(::grpc::ClientContext* context, const ::mom::queue_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_queue_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::message_status>* MOM_service::Stub::PrepareAsyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::message_status, ::mom::queue_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_queue_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::message_status>* MOM_service::Stub::Asyncsend_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_queue_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_id& request, ::mom::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::queue_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_receive_queue_message_, context, request, response);
}

void MOM_service::Stub::async::receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_id* request, ::mom::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::queue_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_receive_queue_message_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::receive_queue_message(::grpc::ClientContext* context, const ::mom::queue_id* request, ::mom::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_receive_queue_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::Message>* MOM_service::Stub::PrepareAsyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::Message, ::mom::queue_id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_receive_queue_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::Message>* MOM_service::Stub::Asyncreceive_queue_messageRaw(::grpc::ClientContext* context, const ::mom::queue_id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreceive_queue_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message& request, ::mom::message_status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_publish_topic_message_, context, request, response);
}

void MOM_service::Stub::async::publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_publish_topic_message_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::publish_topic_message(::grpc::ClientContext* context, const ::mom::topic_message* request, ::mom::message_status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_publish_topic_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::message_status>* MOM_service::Stub::PrepareAsyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::message_status, ::mom::topic_message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_publish_topic_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::message_status>* MOM_service::Stub::Asyncpublish_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpublish_topic_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_id& request, ::mom::Message* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::topic_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_receive_topic_message_, context, request, response);
}

void MOM_service::Stub::async::receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::Message* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::topic_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_receive_topic_message_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::receive_topic_message(::grpc::ClientContext* context, const ::mom::topic_id* request, ::mom::Message* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_receive_topic_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::Message>* MOM_service::Stub::PrepareAsyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::Message, ::mom::topic_id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_receive_topic_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::Message>* MOM_service::Stub::Asyncreceive_topic_messageRaw(::grpc::ClientContext* context, const ::mom::topic_id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreceive_topic_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::join_cluster(::grpc::ClientContext* context, const ::mom::node_info& request, ::mom::cluster_info* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_info, ::mom::cluster_info, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_join_cluster_, context, request, response);
}

void MOM_service::Stub::async::join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_info, ::mom::cluster_info, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_join_cluster_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::join_cluster(::grpc::ClientContext* context, const ::mom::node_info* request, ::mom::cluster_info* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_join_cluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::cluster_info>* MOM_service::Stub::PrepareAsyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::cluster_info, ::mom::node_info, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_join_cluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::cluster_info>* MOM_service::Stub::Asyncjoin_clusterRaw(::grpc::ClientContext* context, const ::mom::node_info& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncjoin_clusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::leave_cluster(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_leave_cluster_, context, request, response);
}

void MOM_service::Stub::async::leave_cluster(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_leave_cluster_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::leave_cluster(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_leave_cluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_leave_cluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::Asyncleave_clusterRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncleave_clusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MOM_service::Stub::heartbeat(::grpc::ClientContext* context, const ::mom::node_ID& request, ::mom::status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_heartbeat_, context, request, response);
}

void MOM_service::Stub::async::heartbeat(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_heartbeat_, context, request, response, std::move(f));
}

void MOM_service::Stub::async::heartbeat(::grpc::ClientContext* context, const ::mom::node_ID* request, ::mom::status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::PrepareAsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mom::status, ::mom::node_ID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mom::status>* MOM_service::Stub::AsyncheartbeatRaw(::grpc::ClientContext* context, const ::mom::node_ID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncheartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

MOM_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::state_response* resp) {
               return service->sync_topics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::state_response* resp) {
               return service->sync_queues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::queue_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::queue_config* req,
             ::mom::status* resp) {
               return service->create_queue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::queue, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::queue* req,
             ::mom::status* resp) {
               return service->delete_queue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::state_response* resp) {
               return service->list_queues(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_config, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_config* req,
             ::mom::status* resp) {
               return service->create_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic* req,
             ::mom::status* resp) {
               return service->delete_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::state_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::state_response* resp) {
               return service->list_topics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_id* req,
             ::mom::status* resp) {
               return service->subscribe_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_id, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_id* req,
             ::mom::status* resp) {
               return service->unsubscribe_topic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::queue_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::queue_message* req,
             ::mom::message_status* resp) {
               return service->send_queue_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::queue_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::queue_id* req,
             ::mom::Message* resp) {
               return service->receive_queue_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_message, ::mom::message_status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_message* req,
             ::mom::message_status* resp) {
               return service->publish_topic_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::topic_id, ::mom::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::topic_id* req,
             ::mom::Message* resp) {
               return service->receive_topic_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_info, ::mom::cluster_info, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_info* req,
             ::mom::cluster_info* resp) {
               return service->join_cluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::status* resp) {
               return service->leave_cluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MOM_service_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MOM_service::Service, ::mom::node_ID, ::mom::status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MOM_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mom::node_ID* req,
             ::mom::status* resp) {
               return service->heartbeat(ctx, req, resp);
             }, this)));
}

MOM_service::Service::~Service() {
}

::grpc::Status MOM_service::Service::sync_topics(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::state_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::sync_queues(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::state_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::create_queue(::grpc::ServerContext* context, const ::mom::queue_config* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::delete_queue(::grpc::ServerContext* context, const ::mom::queue* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::list_queues(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::state_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::create_topic(::grpc::ServerContext* context, const ::mom::topic_config* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::delete_topic(::grpc::ServerContext* context, const ::mom::topic* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::list_topics(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::state_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::subscribe_topic(::grpc::ServerContext* context, const ::mom::topic_id* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::unsubscribe_topic(::grpc::ServerContext* context, const ::mom::topic_id* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::send_queue_message(::grpc::ServerContext* context, const ::mom::queue_message* request, ::mom::message_status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::receive_queue_message(::grpc::ServerContext* context, const ::mom::queue_id* request, ::mom::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::publish_topic_message(::grpc::ServerContext* context, const ::mom::topic_message* request, ::mom::message_status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::receive_topic_message(::grpc::ServerContext* context, const ::mom::topic_id* request, ::mom::Message* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::join_cluster(::grpc::ServerContext* context, const ::mom::node_info* request, ::mom::cluster_info* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::leave_cluster(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MOM_service::Service::heartbeat(::grpc::ServerContext* context, const ::mom::node_ID* request, ::mom::status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mom

