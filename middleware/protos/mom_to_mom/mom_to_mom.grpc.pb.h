// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mom_to_mom.proto
#ifndef GRPC_mom_5fto_5fmom_2eproto__INCLUDED
#define GRPC_mom_5fto_5fmom_2eproto__INCLUDED

#include "mom_to_mom.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace mom_to_mom {

class MOM_cluster_service final {
 public:
  static constexpr char const* service_full_name() {
    return "mom_to_mom.MOM_cluster_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_topicRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_queueRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_delete_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_delete_queueRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_delete_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_delete_topicRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_topic_subscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_subscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_topic_unsubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_unsubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_queue_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> Asyncreplicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(Asyncreplicate_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::mom_to_mom::structure_message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>> Asyncreplicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>>(Asyncreplicate_receive_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>> PrepareAsyncreplicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>>(PrepareAsyncreplicate_receive_queue_messageRaw(context, request, cq));
    }
    virtual ::grpc::Status replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::structure_message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>> Asyncreplicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>>(Asyncreplicate_receive_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>> PrepareAsyncreplicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>>(PrepareAsyncreplicate_receive_topic_messageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* Asyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>* Asyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>* PrepareAsyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>* Asyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mom_to_mom::structure_message>* PrepareAsyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_topicRaw(context, request, cq));
    }
    ::grpc::Status replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_queueRaw(context, request, cq));
    }
    ::grpc::Status replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_delete_queueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_delete_queueRaw(context, request, cq));
    }
    ::grpc::Status replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_delete_topicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_delete_topicRaw(context, request, cq));
    }
    ::grpc::Status replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_topic_subscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_subscriptionRaw(context, request, cq));
    }
    ::grpc::Status replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_topic_unsubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_unsubscriptionRaw(context, request, cq));
    }
    ::grpc::Status replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_queue_messageRaw(context, request, cq));
    }
    ::grpc::Status replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::mom_to_mom::status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> Asyncreplicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(Asyncreplicate_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>> PrepareAsyncreplicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>>(PrepareAsyncreplicate_topic_messageRaw(context, request, cq));
    }
    ::grpc::Status replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::mom_to_mom::structure_message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>> Asyncreplicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>>(Asyncreplicate_receive_queue_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>> PrepareAsyncreplicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>>(PrepareAsyncreplicate_receive_queue_messageRaw(context, request, cq));
    }
    ::grpc::Status replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::mom_to_mom::structure_message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>> Asyncreplicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>>(Asyncreplicate_receive_topic_messageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>> PrepareAsyncreplicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>>(PrepareAsyncreplicate_receive_topic_messageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_delete_queue(::grpc::ClientContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_delete_topic(::grpc::ClientContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_topic_subscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_topic_unsubscription(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, std::function<void(::grpc::Status)>) override;
      void replicate_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)>) override;
      void replicate_receive_queue_message(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, std::function<void(::grpc::Status)>) override;
      void replicate_receive_topic_message(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_delete_queueRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_delete_topicRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_subscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_unsubscriptionRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* Asyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::status>* PrepareAsyncreplicate_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::structure_message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* Asyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* PrepareAsyncreplicate_receive_queue_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::queue_identifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* Asyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mom_to_mom::structure_message>* PrepareAsyncreplicate_receive_topic_messageRaw(::grpc::ClientContext* context, const ::mom_to_mom::topic_subscription& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_queue_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_delete_queue_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_delete_topic_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_topic_subscription_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_topic_unsubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_queue_message_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_topic_message_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_receive_queue_message_;
    const ::grpc::internal::RpcMethod rpcmethod_replicate_receive_topic_message_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status replicate_topic(::grpc::ServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_queue(::grpc::ServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_delete_queue(::grpc::ServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_delete_topic(::grpc::ServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_queue_message(::grpc::ServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_topic_message(::grpc::ServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response);
    virtual ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response);
    virtual ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_topic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic(::grpc::ServerContext* context, ::mom_to_mom::topic* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_queue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_queue(::grpc::ServerContext* context, ::mom_to_mom::queue* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_delete_queue(::grpc::ServerContext* context, ::mom_to_mom::queue* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_delete_topic(::grpc::ServerContext* context, ::mom_to_mom::topic* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_subscription(::grpc::ServerContext* context, ::mom_to_mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_unsubscription(::grpc::ServerContext* context, ::mom_to_mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_queue_message(::grpc::ServerContext* context, ::mom_to_mom::structure_message* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_message(::grpc::ServerContext* context, ::mom_to_mom::structure_message* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_receive_queue_message(::grpc::ServerContext* context, ::mom_to_mom::queue_identifier* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::structure_message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_receive_topic_message(::grpc::ServerContext* context, ::mom_to_mom::topic_subscription* request, ::grpc::ServerAsyncResponseWriter< ::mom_to_mom::structure_message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_replicate_topic<WithAsyncMethod_replicate_queue<WithAsyncMethod_replicate_delete_queue<WithAsyncMethod_replicate_delete_topic<WithAsyncMethod_replicate_topic_subscription<WithAsyncMethod_replicate_topic_unsubscription<WithAsyncMethod_replicate_queue_message<WithAsyncMethod_replicate_topic_message<WithAsyncMethod_replicate_receive_queue_message<WithAsyncMethod_replicate_receive_topic_message<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_topic() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response) { return this->replicate_topic(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_topic(
        ::grpc::MessageAllocator< ::mom_to_mom::topic, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_queue() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response) { return this->replicate_queue(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_queue(
        ::grpc::MessageAllocator< ::mom_to_mom::queue, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::queue* request, ::mom_to_mom::status* response) { return this->replicate_delete_queue(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_delete_queue(
        ::grpc::MessageAllocator< ::mom_to_mom::queue, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_delete_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::topic* request, ::mom_to_mom::status* response) { return this->replicate_delete_topic(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_delete_topic(
        ::grpc::MessageAllocator< ::mom_to_mom::topic, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_delete_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response) { return this->replicate_topic_subscription(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_topic_subscription(
        ::grpc::MessageAllocator< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_subscription(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::status* response) { return this->replicate_topic_unsubscription(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_topic_unsubscription(
        ::grpc::MessageAllocator< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_unsubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::structure_message, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response) { return this->replicate_queue_message(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_queue_message(
        ::grpc::MessageAllocator< ::mom_to_mom::structure_message, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::structure_message, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::structure_message, ::mom_to_mom::status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::structure_message* request, ::mom_to_mom::status* response) { return this->replicate_topic_message(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_topic_message(
        ::grpc::MessageAllocator< ::mom_to_mom::structure_message, ::mom_to_mom::status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::structure_message, ::mom_to_mom::status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::queue_identifier* request, ::mom_to_mom::structure_message* response) { return this->replicate_receive_queue_message(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_receive_queue_message(
        ::grpc::MessageAllocator< ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_receive_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mom_to_mom::topic_subscription* request, ::mom_to_mom::structure_message* response) { return this->replicate_receive_topic_message(context, request, response); }));}
    void SetMessageAllocatorFor_replicate_receive_topic_message(
        ::grpc::MessageAllocator< ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_receive_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_replicate_topic<WithCallbackMethod_replicate_queue<WithCallbackMethod_replicate_delete_queue<WithCallbackMethod_replicate_delete_topic<WithCallbackMethod_replicate_topic_subscription<WithCallbackMethod_replicate_topic_unsubscription<WithCallbackMethod_replicate_queue_message<WithCallbackMethod_replicate_topic_message<WithCallbackMethod_replicate_receive_queue_message<WithCallbackMethod_replicate_receive_topic_message<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_topic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_queue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_topic() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_queue() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_queue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_delete_queue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_delete_topic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_subscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_unsubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_queue_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_topic_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_receive_queue_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreplicate_receive_topic_message(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_topic() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_queue() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_queue(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_delete_queue(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_delete_queue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_delete_topic(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_delete_topic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_topic_subscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_subscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_topic_unsubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_unsubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_queue_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_topic_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_receive_queue_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_receive_queue_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->replicate_receive_topic_message(context, request, response); }));
    }
    ~WithRawCallbackMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* replicate_receive_topic_message(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_topic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::topic, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::topic, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::topic,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_queue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::queue, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::queue, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_queue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_queue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::queue,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_delete_queue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_delete_queue() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::queue, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::queue, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_delete_queue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_delete_queue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_delete_queue(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_delete_queue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::queue,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_delete_topic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_delete_topic() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::topic, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::topic, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_delete_topic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_delete_topic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_delete_topic(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_delete_topic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::topic,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_topic_subscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_topic_subscription() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::topic_subscription, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::topic_subscription, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_topic_subscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_topic_subscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_topic_subscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_topic_subscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::topic_subscription,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_topic_unsubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_topic_unsubscription() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::topic_subscription, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::topic_subscription, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_topic_unsubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_topic_unsubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_topic_unsubscription(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_topic_unsubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::topic_subscription,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_queue_message() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::structure_message, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::structure_message, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_queue_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_queue_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::structure_message,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_topic_message() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::structure_message, ::mom_to_mom::status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::structure_message, ::mom_to_mom::status>* streamer) {
                       return this->Streamedreplicate_topic_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::structure_message* /*request*/, ::mom_to_mom::status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_topic_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::structure_message,::mom_to_mom::status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_receive_queue_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_receive_queue_message() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::queue_identifier, ::mom_to_mom::structure_message>* streamer) {
                       return this->Streamedreplicate_receive_queue_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_receive_queue_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_receive_queue_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::queue_identifier* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_receive_queue_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::queue_identifier,::mom_to_mom::structure_message>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_replicate_receive_topic_message : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_replicate_receive_topic_message() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mom_to_mom::topic_subscription, ::mom_to_mom::structure_message>* streamer) {
                       return this->Streamedreplicate_receive_topic_message(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_replicate_receive_topic_message() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status replicate_receive_topic_message(::grpc::ServerContext* /*context*/, const ::mom_to_mom::topic_subscription* /*request*/, ::mom_to_mom::structure_message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedreplicate_receive_topic_message(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mom_to_mom::topic_subscription,::mom_to_mom::structure_message>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_replicate_topic<WithStreamedUnaryMethod_replicate_queue<WithStreamedUnaryMethod_replicate_delete_queue<WithStreamedUnaryMethod_replicate_delete_topic<WithStreamedUnaryMethod_replicate_topic_subscription<WithStreamedUnaryMethod_replicate_topic_unsubscription<WithStreamedUnaryMethod_replicate_queue_message<WithStreamedUnaryMethod_replicate_topic_message<WithStreamedUnaryMethod_replicate_receive_queue_message<WithStreamedUnaryMethod_replicate_receive_topic_message<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_replicate_topic<WithStreamedUnaryMethod_replicate_queue<WithStreamedUnaryMethod_replicate_delete_queue<WithStreamedUnaryMethod_replicate_delete_topic<WithStreamedUnaryMethod_replicate_topic_subscription<WithStreamedUnaryMethod_replicate_topic_unsubscription<WithStreamedUnaryMethod_replicate_queue_message<WithStreamedUnaryMethod_replicate_topic_message<WithStreamedUnaryMethod_replicate_receive_queue_message<WithStreamedUnaryMethod_replicate_receive_topic_message<Service > > > > > > > > > > StreamedService;
};

}  // namespace mom_to_mom


#endif  // GRPC_mom_5fto_5fmom_2eproto__INCLUDED
