// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mom_to_mom.proto
// Protobuf C++ Version: 5.29.0

#ifndef mom_5fto_5fmom_2eproto_2epb_2eh
#define mom_5fto_5fmom_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mom_5fto_5fmom_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mom_5fto_5fmom_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mom_5fto_5fmom_2eproto;
namespace mom_to_mom {
class message;
struct messageDefaultTypeInternal;
extern messageDefaultTypeInternal _message_default_instance_;
class queue;
struct queueDefaultTypeInternal;
extern queueDefaultTypeInternal _queue_default_instance_;
class queue_identifier;
struct queue_identifierDefaultTypeInternal;
extern queue_identifierDefaultTypeInternal _queue_identifier_default_instance_;
class status;
struct statusDefaultTypeInternal;
extern statusDefaultTypeInternal _status_default_instance_;
class structure_message;
struct structure_messageDefaultTypeInternal;
extern structure_messageDefaultTypeInternal _structure_message_default_instance_;
class topic;
struct topicDefaultTypeInternal;
extern topicDefaultTypeInternal _topic_default_instance_;
class topic_subscription;
struct topic_subscriptionDefaultTypeInternal;
extern topic_subscriptionDefaultTypeInternal _topic_subscription_default_instance_;
}  // namespace mom_to_mom
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mom_to_mom {

// ===================================================================


// -------------------------------------------------------------------

class topic_subscription final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.topic_subscription) */ {
 public:
  inline topic_subscription() : topic_subscription(nullptr) {}
  ~topic_subscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic_subscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic_subscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic_subscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic_subscription(const topic_subscription& from) : topic_subscription(nullptr, from) {}
  inline topic_subscription(topic_subscription&& from) noexcept
      : topic_subscription(nullptr, std::move(from)) {}
  inline topic_subscription& operator=(const topic_subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic_subscription& operator=(topic_subscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic_subscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic_subscription* internal_default_instance() {
    return reinterpret_cast<const topic_subscription*>(
        &_topic_subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(topic_subscription& a, topic_subscription& b) { a.Swap(&b); }
  inline void Swap(topic_subscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic_subscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic_subscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic_subscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic_subscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic_subscription& from) { topic_subscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic_subscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.topic_subscription"; }

 protected:
  explicit topic_subscription(::google::protobuf::Arena* arena);
  topic_subscription(::google::protobuf::Arena* arena, const topic_subscription& from);
  topic_subscription(::google::protobuf::Arena* arena, topic_subscription&& from) noexcept
      : topic_subscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTopicNameFieldNumber = 1,
    kTopicOwnerFieldNumber = 2,
    kSubscriberQueueNameFieldNumber = 3,
    kSubscriberQueueOwnerFieldNumber = 4,
    kDurableFieldNumber = 5,
  };
  // string topic_name = 1;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string topic_owner = 2;
  void clear_topic_owner() ;
  const std::string& topic_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_owner(Arg_&& arg, Args_... args);
  std::string* mutable_topic_owner();
  PROTOBUF_NODISCARD std::string* release_topic_owner();
  void set_allocated_topic_owner(std::string* value);

  private:
  const std::string& _internal_topic_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_owner(
      const std::string& value);
  std::string* _internal_mutable_topic_owner();

  public:
  // string subscriber_queue_name = 3;
  void clear_subscriber_queue_name() ;
  const std::string& subscriber_queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_queue_name();
  PROTOBUF_NODISCARD std::string* release_subscriber_queue_name();
  void set_allocated_subscriber_queue_name(std::string* value);

  private:
  const std::string& _internal_subscriber_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_queue_name(
      const std::string& value);
  std::string* _internal_mutable_subscriber_queue_name();

  public:
  // string subscriber_queue_owner = 4;
  void clear_subscriber_queue_owner() ;
  const std::string& subscriber_queue_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_queue_owner(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_queue_owner();
  PROTOBUF_NODISCARD std::string* release_subscriber_queue_owner();
  void set_allocated_subscriber_queue_owner(std::string* value);

  private:
  const std::string& _internal_subscriber_queue_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_queue_owner(
      const std::string& value);
  std::string* _internal_mutable_subscriber_queue_owner();

  public:
  // bool durable = 5;
  void clear_durable() ;
  bool durable() const;
  void set_durable(bool value);

  private:
  bool _internal_durable() const;
  void _internal_set_durable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.topic_subscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      102, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic_subscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_owner_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_queue_name_;
    ::google::protobuf::internal::ArenaStringPtr subscriber_queue_owner_;
    bool durable_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class structure_message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.structure_message) */ {
 public:
  inline structure_message() : structure_message(nullptr) {}
  ~structure_message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(structure_message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(structure_message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR structure_message(
      ::google::protobuf::internal::ConstantInitialized);

  inline structure_message(const structure_message& from) : structure_message(nullptr, from) {}
  inline structure_message(structure_message&& from) noexcept
      : structure_message(nullptr, std::move(from)) {}
  inline structure_message& operator=(const structure_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline structure_message& operator=(structure_message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const structure_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const structure_message* internal_default_instance() {
    return reinterpret_cast<const structure_message*>(
        &_structure_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(structure_message& a, structure_message& b) { a.Swap(&b); }
  inline void Swap(structure_message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(structure_message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  structure_message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<structure_message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const structure_message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const structure_message& from) { structure_message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(structure_message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.structure_message"; }

 protected:
  explicit structure_message(::google::protobuf::Arena* arena);
  structure_message(::google::protobuf::Arena* arena, const structure_message& from);
  structure_message(::google::protobuf::Arena* arena, structure_message&& from) noexcept
      : structure_message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStructureNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kSenderFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kPersistentFieldNumber = 5,
  };
  // string structure_name = 1;
  void clear_structure_name() ;
  const std::string& structure_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_structure_name(Arg_&& arg, Args_... args);
  std::string* mutable_structure_name();
  PROTOBUF_NODISCARD std::string* release_structure_name();
  void set_allocated_structure_name(std::string* value);

  private:
  const std::string& _internal_structure_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_structure_name(
      const std::string& value);
  std::string* _internal_mutable_structure_name();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 3;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // int64 timestamp = 4;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool persistent = 5;
  void clear_persistent() ;
  bool persistent() const;
  void set_persistent(bool value);

  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.structure_message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const structure_message& from_msg);
    ::google::protobuf::internal::ArenaStringPtr structure_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::int64_t timestamp_;
    bool persistent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class status final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.status) */ {
 public:
  inline status() : status(nullptr) {}
  ~status() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(status* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(status));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR status(
      ::google::protobuf::internal::ConstantInitialized);

  inline status(const status& from) : status(nullptr, from) {}
  inline status(status&& from) noexcept
      : status(nullptr, std::move(from)) {}
  inline status& operator=(const status& from) {
    CopyFrom(from);
    return *this;
  }
  inline status& operator=(status&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const status& default_instance() {
    return *internal_default_instance();
  }
  static inline const status* internal_default_instance() {
    return reinterpret_cast<const status*>(
        &_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(status& a, status& b) { a.Swap(&b); }
  inline void Swap(status* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  status* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const status& from) { status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(status* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.status"; }

 protected:
  explicit status(::google::protobuf::Arena* arena);
  status(::google::protobuf::Arena* arena, const status& from);
  status(::google::protobuf::Arena* arena, status&& from) noexcept
      : status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const status& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class queue_identifier final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.queue_identifier) */ {
 public:
  inline queue_identifier() : queue_identifier(nullptr) {}
  ~queue_identifier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue_identifier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue_identifier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue_identifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue_identifier(const queue_identifier& from) : queue_identifier(nullptr, from) {}
  inline queue_identifier(queue_identifier&& from) noexcept
      : queue_identifier(nullptr, std::move(from)) {}
  inline queue_identifier& operator=(const queue_identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue_identifier& operator=(queue_identifier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue_identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue_identifier* internal_default_instance() {
    return reinterpret_cast<const queue_identifier*>(
        &_queue_identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(queue_identifier& a, queue_identifier& b) { a.Swap(&b); }
  inline void Swap(queue_identifier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue_identifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue_identifier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue_identifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue_identifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue_identifier& from) { queue_identifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue_identifier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.queue_identifier"; }

 protected:
  explicit queue_identifier(::google::protobuf::Arena* arena);
  queue_identifier(::google::protobuf::Arena* arena, const queue_identifier& from);
  queue_identifier(::google::protobuf::Arena* arena, queue_identifier&& from) noexcept
      : queue_identifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string owner = 2;
  void clear_owner() ;
  const std::string& owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* value);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.queue_identifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue_identifier& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr owner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class message final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.message) */ {
 public:
  inline message() : message(nullptr) {}
  ~message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR message(
      ::google::protobuf::internal::ConstantInitialized);

  inline message(const message& from) : message(nullptr, from) {}
  inline message(message&& from) noexcept
      : message(nullptr, std::move(from)) {}
  inline message& operator=(const message& from) {
    CopyFrom(from);
    return *this;
  }
  inline message& operator=(message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const message& default_instance() {
    return *internal_default_instance();
  }
  static inline const message* internal_default_instance() {
    return reinterpret_cast<const message*>(
        &_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(message& a, message& b) { a.Swap(&b); }
  inline void Swap(message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const message& from) { message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.message"; }

 protected:
  explicit message(::google::protobuf::Arena* arena);
  message(::google::protobuf::Arena* arena, const message& from);
  message(::google::protobuf::Arena* arena, message&& from) noexcept
      : message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kSenderFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kPersistentFieldNumber = 4,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string sender = 2;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // int64 timestamp = 3;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // bool persistent = 4;
  void clear_persistent() ;
  bool persistent() const;
  void set_persistent(bool value);

  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const message& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::int64_t timestamp_;
    bool persistent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class queue final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.queue) */ {
 public:
  inline queue() : queue(nullptr) {}
  ~queue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(queue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(queue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR queue(
      ::google::protobuf::internal::ConstantInitialized);

  inline queue(const queue& from) : queue(nullptr, from) {}
  inline queue(queue&& from) noexcept
      : queue(nullptr, std::move(from)) {}
  inline queue& operator=(const queue& from) {
    CopyFrom(from);
    return *this;
  }
  inline queue& operator=(queue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const queue& default_instance() {
    return *internal_default_instance();
  }
  static inline const queue* internal_default_instance() {
    return reinterpret_cast<const queue*>(
        &_queue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(queue& a, queue& b) { a.Swap(&b); }
  inline void Swap(queue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  queue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<queue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const queue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const queue& from) { queue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(queue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.queue"; }

 protected:
  explicit queue(::google::protobuf::Arena* arena);
  queue(::google::protobuf::Arena* arena, const queue& from);
  queue(::google::protobuf::Arena* arena, queue&& from) noexcept
      : queue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 4,
    kQueueNameFieldNumber = 1,
    kQueueOwnerFieldNumber = 2,
    kCreationStampFieldNumber = 3,
  };
  // repeated .mom_to_mom.message messages = 4;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::mom_to_mom::message* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>* _internal_mutable_messages();
  public:
  const ::mom_to_mom::message& messages(int index) const;
  ::mom_to_mom::message* add_messages();
  const ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>& messages() const;
  // string queue_name = 1;
  void clear_queue_name() ;
  const std::string& queue_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_name(Arg_&& arg, Args_... args);
  std::string* mutable_queue_name();
  PROTOBUF_NODISCARD std::string* release_queue_name();
  void set_allocated_queue_name(std::string* value);

  private:
  const std::string& _internal_queue_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_name(
      const std::string& value);
  std::string* _internal_mutable_queue_name();

  public:
  // string queue_owner = 2;
  void clear_queue_owner() ;
  const std::string& queue_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_queue_owner(Arg_&& arg, Args_... args);
  std::string* mutable_queue_owner();
  PROTOBUF_NODISCARD std::string* release_queue_owner();
  void set_allocated_queue_owner(std::string* value);

  private:
  const std::string& _internal_queue_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_owner(
      const std::string& value);
  std::string* _internal_mutable_queue_owner();

  public:
  // int64 creation_stamp = 3;
  void clear_creation_stamp() ;
  ::int64_t creation_stamp() const;
  void set_creation_stamp(::int64_t value);

  private:
  ::int64_t _internal_creation_stamp() const;
  void _internal_set_creation_stamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.queue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const queue& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom_to_mom::message > messages_;
    ::google::protobuf::internal::ArenaStringPtr queue_name_;
    ::google::protobuf::internal::ArenaStringPtr queue_owner_;
    ::int64_t creation_stamp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};
// -------------------------------------------------------------------

class topic final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mom_to_mom.topic) */ {
 public:
  inline topic() : topic(nullptr) {}
  ~topic() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(topic* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(topic));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR topic(
      ::google::protobuf::internal::ConstantInitialized);

  inline topic(const topic& from) : topic(nullptr, from) {}
  inline topic(topic&& from) noexcept
      : topic(nullptr, std::move(from)) {}
  inline topic& operator=(const topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline topic& operator=(topic&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const topic* internal_default_instance() {
    return reinterpret_cast<const topic*>(
        &_topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(topic& a, topic& b) { a.Swap(&b); }
  inline void Swap(topic* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(topic* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  topic* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<topic>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const topic& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const topic& from) { topic::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(topic* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mom_to_mom.topic"; }

 protected:
  explicit topic(::google::protobuf::Arena* arena);
  topic(::google::protobuf::Arena* arena, const topic& from);
  topic(::google::protobuf::Arena* arena, topic&& from) noexcept
      : topic(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscribedQueuesFieldNumber = 4,
    kTopicNameFieldNumber = 1,
    kTopicOwnerFieldNumber = 2,
    kCreationStampFieldNumber = 3,
    kMessageCountFieldNumber = 5,
  };
  // repeated .mom_to_mom.queue subscribed_queues = 4;
  int subscribed_queues_size() const;
  private:
  int _internal_subscribed_queues_size() const;

  public:
  void clear_subscribed_queues() ;
  ::mom_to_mom::queue* mutable_subscribed_queues(int index);
  ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>* mutable_subscribed_queues();

  private:
  const ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>& _internal_subscribed_queues() const;
  ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>* _internal_mutable_subscribed_queues();
  public:
  const ::mom_to_mom::queue& subscribed_queues(int index) const;
  ::mom_to_mom::queue* add_subscribed_queues();
  const ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>& subscribed_queues() const;
  // string topic_name = 1;
  void clear_topic_name() ;
  const std::string& topic_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_name(Arg_&& arg, Args_... args);
  std::string* mutable_topic_name();
  PROTOBUF_NODISCARD std::string* release_topic_name();
  void set_allocated_topic_name(std::string* value);

  private:
  const std::string& _internal_topic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_name(
      const std::string& value);
  std::string* _internal_mutable_topic_name();

  public:
  // string topic_owner = 2;
  void clear_topic_owner() ;
  const std::string& topic_owner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic_owner(Arg_&& arg, Args_... args);
  std::string* mutable_topic_owner();
  PROTOBUF_NODISCARD std::string* release_topic_owner();
  void set_allocated_topic_owner(std::string* value);

  private:
  const std::string& _internal_topic_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic_owner(
      const std::string& value);
  std::string* _internal_mutable_topic_owner();

  public:
  // int64 creation_stamp = 3;
  void clear_creation_stamp() ;
  ::int64_t creation_stamp() const;
  void set_creation_stamp(::int64_t value);

  private:
  ::int64_t _internal_creation_stamp() const;
  void _internal_set_creation_stamp(::int64_t value);

  public:
  // int32 message_count = 5;
  void clear_message_count() ;
  ::int32_t message_count() const;
  void set_message_count(::int32_t value);

  private:
  ::int32_t _internal_message_count() const;
  void _internal_set_message_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mom_to_mom.topic)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const topic& from_msg);
    ::google::protobuf::RepeatedPtrField< ::mom_to_mom::queue > subscribed_queues_;
    ::google::protobuf::internal::ArenaStringPtr topic_name_;
    ::google::protobuf::internal::ArenaStringPtr topic_owner_;
    ::int64_t creation_stamp_;
    ::int32_t message_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mom_5fto_5fmom_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// message

// string content = 1;
inline void message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.message.content)
}
inline std::string* message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.message.content)
  return _s;
}
inline const std::string& message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.message.content)
  return _impl_.content_.Release();
}
inline void message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.message.content)
}

// string sender = 2;
inline void message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.message.sender)
}
inline std::string* message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.message.sender)
  return _s;
}
inline const std::string& message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.message.sender)
  return _impl_.sender_.Release();
}
inline void message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.message.sender)
}

// int64 timestamp = 3;
inline void message::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t message::timestamp() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.message.timestamp)
  return _internal_timestamp();
}
inline void message::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.message.timestamp)
}
inline ::int64_t message::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void message::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bool persistent = 4;
inline void message::clear_persistent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = false;
}
inline bool message::persistent() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.message.persistent)
  return _internal_persistent();
}
inline void message::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.message.persistent)
}
inline bool message::_internal_persistent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_;
}
inline void message::_internal_set_persistent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = value;
}

// -------------------------------------------------------------------

// queue

// string queue_name = 1;
inline void queue::clear_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.ClearToEmpty();
}
inline const std::string& queue::queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue.queue_name)
  return _internal_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue::set_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.queue.queue_name)
}
inline std::string* queue::mutable_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.queue.queue_name)
  return _s;
}
inline const std::string& queue::_internal_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_name_.Get();
}
inline void queue::_internal_set_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.Set(value, GetArena());
}
inline std::string* queue::_internal_mutable_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_name_.Mutable( GetArena());
}
inline std::string* queue::release_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.queue.queue_name)
  return _impl_.queue_name_.Release();
}
inline void queue::set_allocated_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.queue_name_.IsDefault()) {
    _impl_.queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.queue.queue_name)
}

// string queue_owner = 2;
inline void queue::clear_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_owner_.ClearToEmpty();
}
inline const std::string& queue::queue_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue.queue_owner)
  return _internal_queue_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue::set_queue_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.queue.queue_owner)
}
inline std::string* queue::mutable_queue_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_queue_owner();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.queue.queue_owner)
  return _s;
}
inline const std::string& queue::_internal_queue_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_owner_.Get();
}
inline void queue::_internal_set_queue_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_owner_.Set(value, GetArena());
}
inline std::string* queue::_internal_mutable_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.queue_owner_.Mutable( GetArena());
}
inline std::string* queue::release_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.queue.queue_owner)
  return _impl_.queue_owner_.Release();
}
inline void queue::set_allocated_queue_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.queue_owner_.IsDefault()) {
    _impl_.queue_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.queue.queue_owner)
}

// int64 creation_stamp = 3;
inline void queue::clear_creation_stamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_stamp_ = ::int64_t{0};
}
inline ::int64_t queue::creation_stamp() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue.creation_stamp)
  return _internal_creation_stamp();
}
inline void queue::set_creation_stamp(::int64_t value) {
  _internal_set_creation_stamp(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.queue.creation_stamp)
}
inline ::int64_t queue::_internal_creation_stamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_stamp_;
}
inline void queue::_internal_set_creation_stamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_stamp_ = value;
}

// repeated .mom_to_mom.message messages = 4;
inline int queue::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int queue::messages_size() const {
  return _internal_messages_size();
}
inline void queue::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::mom_to_mom::message* queue::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom_to_mom.queue.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>* queue::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom_to_mom.queue.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::mom_to_mom::message& queue::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue.messages)
  return _internal_messages().Get(index);
}
inline ::mom_to_mom::message* queue::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom_to_mom::message* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:mom_to_mom.queue.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>& queue::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom_to_mom.queue.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>&
queue::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::mom_to_mom::message>*
queue::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// topic

// string topic_name = 1;
inline void topic::clear_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& topic::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic.topic_name)
}
inline std::string* topic::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic.topic_name)
  return _s;
}
inline const std::string& topic::_internal_topic_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_name_.Get();
}
inline void topic::_internal_set_topic_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* topic::_internal_mutable_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* topic::release_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic.topic_name)
  return _impl_.topic_name_.Release();
}
inline void topic::set_allocated_topic_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic.topic_name)
}

// string topic_owner = 2;
inline void topic::clear_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.ClearToEmpty();
}
inline const std::string& topic::topic_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic.topic_owner)
  return _internal_topic_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic::set_topic_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic.topic_owner)
}
inline std::string* topic::mutable_topic_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_owner();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic.topic_owner)
  return _s;
}
inline const std::string& topic::_internal_topic_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_owner_.Get();
}
inline void topic::_internal_set_topic_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(value, GetArena());
}
inline std::string* topic::_internal_mutable_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_owner_.Mutable( GetArena());
}
inline std::string* topic::release_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic.topic_owner)
  return _impl_.topic_owner_.Release();
}
inline void topic::set_allocated_topic_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_owner_.IsDefault()) {
    _impl_.topic_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic.topic_owner)
}

// int64 creation_stamp = 3;
inline void topic::clear_creation_stamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_stamp_ = ::int64_t{0};
}
inline ::int64_t topic::creation_stamp() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic.creation_stamp)
  return _internal_creation_stamp();
}
inline void topic::set_creation_stamp(::int64_t value) {
  _internal_set_creation_stamp(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.topic.creation_stamp)
}
inline ::int64_t topic::_internal_creation_stamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_stamp_;
}
inline void topic::_internal_set_creation_stamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_stamp_ = value;
}

// repeated .mom_to_mom.queue subscribed_queues = 4;
inline int topic::_internal_subscribed_queues_size() const {
  return _internal_subscribed_queues().size();
}
inline int topic::subscribed_queues_size() const {
  return _internal_subscribed_queues_size();
}
inline void topic::clear_subscribed_queues() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscribed_queues_.Clear();
}
inline ::mom_to_mom::queue* topic::mutable_subscribed_queues(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic.subscribed_queues)
  return _internal_mutable_subscribed_queues()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>* topic::mutable_subscribed_queues()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mom_to_mom.topic.subscribed_queues)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subscribed_queues();
}
inline const ::mom_to_mom::queue& topic::subscribed_queues(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic.subscribed_queues)
  return _internal_subscribed_queues().Get(index);
}
inline ::mom_to_mom::queue* topic::add_subscribed_queues() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mom_to_mom::queue* _add = _internal_mutable_subscribed_queues()->Add();
  // @@protoc_insertion_point(field_add:mom_to_mom.topic.subscribed_queues)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>& topic::subscribed_queues() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mom_to_mom.topic.subscribed_queues)
  return _internal_subscribed_queues();
}
inline const ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>&
topic::_internal_subscribed_queues() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscribed_queues_;
}
inline ::google::protobuf::RepeatedPtrField<::mom_to_mom::queue>*
topic::_internal_mutable_subscribed_queues() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subscribed_queues_;
}

// int32 message_count = 5;
inline void topic::clear_message_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = 0;
}
inline ::int32_t topic::message_count() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic.message_count)
  return _internal_message_count();
}
inline void topic::set_message_count(::int32_t value) {
  _internal_set_message_count(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.topic.message_count)
}
inline ::int32_t topic::_internal_message_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_count_;
}
inline void topic::_internal_set_message_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_count_ = value;
}

// -------------------------------------------------------------------

// status

// bool success = 1;
inline void status::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool status::success() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.status.success)
  return _internal_success();
}
inline void status::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.status.success)
}
inline bool status::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void status::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void status::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& status::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.status.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void status::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.status.message)
}
inline std::string* status::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.status.message)
  return _s;
}
inline const std::string& status::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void status::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* status::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* status::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.status.message)
  return _impl_.message_.Release();
}
inline void status::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.status.message)
}

// -------------------------------------------------------------------

// topic_subscription

// string topic_name = 1;
inline void topic_subscription::clear_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.ClearToEmpty();
}
inline const std::string& topic_subscription::topic_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic_subscription.topic_name)
  return _internal_topic_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_topic_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic_subscription.topic_name)
}
inline std::string* topic_subscription::mutable_topic_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic_subscription.topic_name)
  return _s;
}
inline const std::string& topic_subscription::_internal_topic_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_name_.Get();
}
inline void topic_subscription::_internal_set_topic_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_name_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_topic_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic_subscription.topic_name)
  return _impl_.topic_name_.Release();
}
inline void topic_subscription::set_allocated_topic_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_name_.IsDefault()) {
    _impl_.topic_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic_subscription.topic_name)
}

// string topic_owner = 2;
inline void topic_subscription::clear_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.ClearToEmpty();
}
inline const std::string& topic_subscription::topic_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic_subscription.topic_owner)
  return _internal_topic_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_topic_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic_subscription.topic_owner)
}
inline std::string* topic_subscription::mutable_topic_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic_owner();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic_subscription.topic_owner)
  return _s;
}
inline const std::string& topic_subscription::_internal_topic_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_owner_.Get();
}
inline void topic_subscription::_internal_set_topic_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_owner_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_topic_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic_subscription.topic_owner)
  return _impl_.topic_owner_.Release();
}
inline void topic_subscription::set_allocated_topic_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_owner_.IsDefault()) {
    _impl_.topic_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic_subscription.topic_owner)
}

// string subscriber_queue_name = 3;
inline void topic_subscription::clear_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.ClearToEmpty();
}
inline const std::string& topic_subscription::subscriber_queue_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic_subscription.subscriber_queue_name)
  return _internal_subscriber_queue_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_subscriber_queue_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic_subscription.subscriber_queue_name)
}
inline std::string* topic_subscription::mutable_subscriber_queue_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_queue_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic_subscription.subscriber_queue_name)
  return _s;
}
inline const std::string& topic_subscription::_internal_subscriber_queue_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_queue_name_.Get();
}
inline void topic_subscription::_internal_set_subscriber_queue_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_queue_name_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_subscriber_queue_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic_subscription.subscriber_queue_name)
  return _impl_.subscriber_queue_name_.Release();
}
inline void topic_subscription::set_allocated_subscriber_queue_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_queue_name_.IsDefault()) {
    _impl_.subscriber_queue_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic_subscription.subscriber_queue_name)
}

// string subscriber_queue_owner = 4;
inline void topic_subscription::clear_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.ClearToEmpty();
}
inline const std::string& topic_subscription::subscriber_queue_owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic_subscription.subscriber_queue_owner)
  return _internal_subscriber_queue_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void topic_subscription::set_subscriber_queue_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.topic_subscription.subscriber_queue_owner)
}
inline std::string* topic_subscription::mutable_subscriber_queue_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_queue_owner();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.topic_subscription.subscriber_queue_owner)
  return _s;
}
inline const std::string& topic_subscription::_internal_subscriber_queue_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscriber_queue_owner_.Get();
}
inline void topic_subscription::_internal_set_subscriber_queue_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.Set(value, GetArena());
}
inline std::string* topic_subscription::_internal_mutable_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscriber_queue_owner_.Mutable( GetArena());
}
inline std::string* topic_subscription::release_subscriber_queue_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.topic_subscription.subscriber_queue_owner)
  return _impl_.subscriber_queue_owner_.Release();
}
inline void topic_subscription::set_allocated_subscriber_queue_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscriber_queue_owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscriber_queue_owner_.IsDefault()) {
    _impl_.subscriber_queue_owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.topic_subscription.subscriber_queue_owner)
}

// bool durable = 5;
inline void topic_subscription::clear_durable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = false;
}
inline bool topic_subscription::durable() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.topic_subscription.durable)
  return _internal_durable();
}
inline void topic_subscription::set_durable(bool value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.topic_subscription.durable)
}
inline bool topic_subscription::_internal_durable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.durable_;
}
inline void topic_subscription::_internal_set_durable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.durable_ = value;
}

// -------------------------------------------------------------------

// structure_message

// string structure_name = 1;
inline void structure_message::clear_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.ClearToEmpty();
}
inline const std::string& structure_message::structure_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.structure_message.structure_name)
  return _internal_structure_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_structure_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.structure_message.structure_name)
}
inline std::string* structure_message::mutable_structure_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_structure_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.structure_message.structure_name)
  return _s;
}
inline const std::string& structure_message::_internal_structure_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.structure_name_.Get();
}
inline void structure_message::_internal_set_structure_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.structure_name_.Mutable( GetArena());
}
inline std::string* structure_message::release_structure_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.structure_message.structure_name)
  return _impl_.structure_name_.Release();
}
inline void structure_message::set_allocated_structure_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.structure_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.structure_name_.IsDefault()) {
    _impl_.structure_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.structure_message.structure_name)
}

// string content = 2;
inline void structure_message::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& structure_message::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.structure_message.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.structure_message.content)
}
inline std::string* structure_message::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.structure_message.content)
  return _s;
}
inline const std::string& structure_message::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void structure_message::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* structure_message::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.structure_message.content)
  return _impl_.content_.Release();
}
inline void structure_message::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.structure_message.content)
}

// string sender = 3;
inline void structure_message::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& structure_message::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.structure_message.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void structure_message::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.structure_message.sender)
}
inline std::string* structure_message::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.structure_message.sender)
  return _s;
}
inline const std::string& structure_message::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void structure_message::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* structure_message::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* structure_message::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.structure_message.sender)
  return _impl_.sender_.Release();
}
inline void structure_message::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.structure_message.sender)
}

// int64 timestamp = 4;
inline void structure_message::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t structure_message::timestamp() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.structure_message.timestamp)
  return _internal_timestamp();
}
inline void structure_message::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.structure_message.timestamp)
}
inline ::int64_t structure_message::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void structure_message::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// bool persistent = 5;
inline void structure_message::clear_persistent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = false;
}
inline bool structure_message::persistent() const {
  // @@protoc_insertion_point(field_get:mom_to_mom.structure_message.persistent)
  return _internal_persistent();
}
inline void structure_message::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:mom_to_mom.structure_message.persistent)
}
inline bool structure_message::_internal_persistent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.persistent_;
}
inline void structure_message::_internal_set_persistent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.persistent_ = value;
}

// -------------------------------------------------------------------

// queue_identifier

// string name = 1;
inline void queue_identifier::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& queue_identifier::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue_identifier.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_identifier::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.queue_identifier.name)
}
inline std::string* queue_identifier::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.queue_identifier.name)
  return _s;
}
inline const std::string& queue_identifier::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void queue_identifier::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* queue_identifier::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* queue_identifier::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.queue_identifier.name)
  return _impl_.name_.Release();
}
inline void queue_identifier::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.queue_identifier.name)
}

// string owner = 2;
inline void queue_identifier::clear_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& queue_identifier::owner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mom_to_mom.queue_identifier.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void queue_identifier::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mom_to_mom.queue_identifier.owner)
}
inline std::string* queue_identifier::mutable_owner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:mom_to_mom.queue_identifier.owner)
  return _s;
}
inline const std::string& queue_identifier::_internal_owner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.owner_.Get();
}
inline void queue_identifier::_internal_set_owner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.Set(value, GetArena());
}
inline std::string* queue_identifier::_internal_mutable_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.owner_.Mutable( GetArena());
}
inline std::string* queue_identifier::release_owner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mom_to_mom.queue_identifier.owner)
  return _impl_.owner_.Release();
}
inline void queue_identifier::set_allocated_owner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.owner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mom_to_mom.queue_identifier.owner)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mom_to_mom


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mom_5fto_5fmom_2eproto_2epb_2eh
